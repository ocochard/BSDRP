# BSD Router Project NanoBSD configuration file
# https://bsdrp.net
#
# NanoBSD port support added from Gitoyen:
# http://www.gitoyen.net/Howto-NanoBSD-quagga-router
# Some cleanup idea taken from imp@ nanoBSD script
# Add other parts came from the FreeNAS 8 too (iXsystems)
#
################## Common section #################

# Console port speed
COM_SPEED=115200
# Where cust_pkg() finds packages to install
NANO_PACKAGE_DIR=${NANO_TOOLS}/Pkg
NANO_PACKAGE_LIST="*"

# Options to put in make.conf during buildworld only
# BOOT_COMCONSOLE_SPEED is useless because we using /boot.config with -Sspeed option
# But for baud higher than 9600 is not supported by boot0:
#  then we let the speed already configured by the BIOS by setting it to 0
CONF_BUILD='
WITH_META_MODE=
WITH_DIRDEPS_BUILD=
WITH_DIRDEPS_CACHE=
BOOT_BOOT0_COMCONSOLE_SPEED=0
'

# Options to put in make.conf during installworld only
# Do not use: WITHOUT_TOOLCHAIN=, because installing port need it
# Do not use: WITHOUT_INSTALLLIB=, because perl can't compile
# We would compile symbol files, but not install them by default
CONF_INSTALL='
'

# Options to put in make.conf during both build- & installworld.
# See the file /usr/src/tools/build/options or man src.conf for details
# WITHOUT_FORTH= mandatory for the boot-loader
# WITHOUT_KERBEROS= prevents to build ftp/curl
# WITHOUT_AUDIT= broken since https://cgit.freebsd.org/src/commit/?id=8c3eaf244a417a4ee105834410a52144206102e5
CONF_WORLD='
WITHOUT_ACCT=
WITHOUT_AMD=
WITHOUT_APM=
WITHOUT_ASSERT_DEBUG=
WITHOUT_ATF=
WITHOUT_ATM=
WITHOUT_AUDIT=
WITHOUT_AUTHPF=
WITHOUT_AUTOFS=
WITHOUT_BHYVE=
WITHOUT_BLUETOOTH=
WITHOUT_BOOTPARAMD=
WITHOUT_BOOTPD=
WITHOUT_BSDINSTALL=
WITHOUT_CALENDAR=
WITHOUT_CCD=
WITHOUT_CROSS_COMPILER=
WITHOUT_CTM=
WITHOUT_CVS=
WITHOUT_DICT=
WITHOUT_EE=
WITHOUT_EXAMPLES=
WITHOUT_FINGER=
WITHOUT_FLOPPY=
WITHOUT_FREEBSD_UPDATE=
WITHOUT_GAMES=
WITHOUT_GCOV=
WITHOUT_GNUCXX=
WITHOUT_GPIB=
WITHOUT_GPIO=
WITHOUT_GROFF=
WITHOUT_HAST=
WITHOUT_HTML=
WITHOUT_INFO=
WITHOUT_IPX=
WITHOUT_IPX_SUPPORT=
WITHOUT_ISCSI=
WITHOUT_KERBEROS=
WITHOUT_LIB32=
WITHOUT_LINT=
WITHOUT_LLVM_ASSERTIONS=
WITHOUT_LLVM_TARGET_ALL=
WITHOUT_LOADER_FIREWIRE=
WITHOUT_LOADER_GELI=
WITHOUT_LOCATE=
WITHOUT_LPR=
WITHOUT_NCP=
WITHOUT_NDIS=
WITHOUT_NIS=
WITHOUT_NLS=
WITHOUT_NLS_CATALOGS=
WITHOUT_NS_CACHING=
WITHOUT_PC_SYSINSTALL=
WITHOUT_PORTSNAP=
WITHOUT_PROFILE=
WITHOUT_QUOTAS=
WITHOUT_RBOOTD=
WITHOUT_RCMDS=
WITHOUT_RCS=
WITHOUT_RESCUE=
WITHOUT_ROUTED=
WITHOUT_SENDMAIL=
WITHOUT_SERVICESDB=
WITHOUT_SHAREDOCS=
WITHOUT_SVNLITE=
WITHOUT_SYSCONS=
WITHOUT_SYSINSTALL=
WITHOUT_TALK=
WITHOUT_TESTS=
WITHOUT_TESTS_SUPPORT=
WITHOUT_TFTP=
WITHOUT_TIMED=
WITHOUT_UNBOUND=
WITHOUT_USB_GADGET_EXAMPLES=
WITHOUT_WIRELESS=
WITHOUT_WPA_SUPPLICANT_EAPOL=
WITH_IDEA=
WITH_OFED=
WITH_DEBUG_FILES=
WITH_DIRDEPS_BUILD=
WITH_RETPOLINE=
WITH_REPRODUCIBLE_BUILD=
WITH_MALLOC_PRODUCTION=
WITH_OPENSSL_KTLS=
WITHOUT_PTHREADS_ASSERTIONS=
'

# Customize commands.
NANO_CUSTOMIZE=""

# Late customize commands.
NANO_LATE_CUSTOMIZE=""

# Newfs paramters to use
NANO_NEWFS="-b 4096 -f 512 -i 8192 -O1 -m 0"

# Number of code images on media (1 or 2)
# We need 2 code here (running and old)
NANO_IMAGES=2

# 0 -> Leave second image all zeroes so it compresses better.
# 1 -> Initialize second image with a copy of the first
NANO_INIT_IMG2=0

# Size of code file system in 512 bytes sectors
# If zero, size will be as large as possible.
NANO_CODESIZE=0

### HOW TO Calculate partition size ###
# If you want a 5MB partition, do:
# 5 * 1024 * 1024 / 512 = 10240

# Size of configuration file system in 512 bytes sectors
# Cannot be zero.
# about 15MB = 20480
NANO_CONFSIZE=20480

# Size of data file system in 512 bytes sectors
# If zero: no partition configured.
# If negative: max size possible
# This filesystem is used for archive configuration and
# for user customized scripts or tool
NANO_DATASIZE=20480

# Size of the /etc ramdisk in 512 bytes sectors
# 20480=10MB
NANO_RAM_ETCSIZE=20480

# Size of the /tmp+/var ramdisk in 512 bytes sectors
# 62500=32MB (usefull for log files)
NANO_RAM_TMPVARSIZE=62500

# Boot0cfg configuration mode
NANO_BOOT0CFG="-o packet -s 1 -m 3 -t 18"

# Backing type of md(4) device
# Can be "file" or "swap"
NANO_MD_BACKING="file"

# Label name
# Alphacharacter only
NANO_LABEL=${NANO_NAME}

# Progress Print level
PPLEVEL=3

# Add netblast/netrecieve tools
add_netrate () {
	TOOLS_LIST="cxgbtool ifinfo netrate/netblast netrate/netreceive netrate/netsend"
	# crypto didn't compile anymore but I don't understand why
	# mctest didn't compile since clang6
	mkdir -p ${NANO_WORLDDIR}/dev
	mount -t devfs devfs ${NANO_WORLDDIR}/dev
	mount -t nullfs ${NANO_SRC} ${NANO_WORLDDIR}/usr/src
	mkdir -p ${NANO_WORLDDIR}/usr/workdir
	for TOOL in ${TOOLS_LIST}; do
		export TOOL
		CR 'make clean -C /usr/src/tools/tools/${TOOL}'
		CR 'env OSVERSION=${FBSD_DST_OSVERSION} \
			UNAME_r=${FBSD_DST_RELEASE} UNAME_v="FreeBSD ${FBSD_DST_RELEASE} ${FBSD_DST_OSVERSION}" \
			make WRKDIRPREFIX=/usr/workdir -C /usr/src/tools/tools/${TOOL}'
		CR 'make WRKDIRPREFIX=/usr/workdir -C /usr/src/tools/tools/${TOOL} install clean'
	done # for TOOL
	rm -rf ${NANO_WORLDDIR}/usr/workdir
	umount ${NANO_WORLDDIR}/usr/src
	umount ${NANO_WORLDDIR}/dev
}

# Recursive complex fonction: Generate one function for each ports
add_port () {
	port=$(echo $1 | sed -e 's/\//_/')
	# Check if package allready exist
	cd "${PORTS_SRC}/$1"
	# Warning: a package name can change regarding the build option
	if [ $# -gt 1 ]; then
		PKG_NAME=$(env PORTSDIR="${PORTS_SRC}" make package-name "$2")
	else
		PKG_NAME=$(env PORTSDIR="${PORTS_SRC}" make package-name)
	fi
	if [ -f "${NANO_OBJ}"/ports/packages/All/${PKG_NAME}.pkg ]; then
	# Pkg file found: Generate add_pkg_NAME function
		eval "
		add_pkg_${port} () {
			#Need to create ${NANO_OBJ}/ports in this add_pkg_${port} function
			if [ ! -d \${NANO_OBJ}/ports ]; then
				mkdir -p \${NANO_OBJ}/ports/packages
			fi
			mkdir -p \${NANO_WORLDDIR}/usr/ports/packages
			mount -t nullfs \${NANO_OBJ}/ports/packages \
				\${NANO_WORLDDIR}/usr/ports/packages
			# Since pkg 1.11, need devfs (because it is using /dev/null)
			mount -t devfs devfs \${NANO_WORLDDIR}/dev
			# Run ldconfig before
			CR '/sbin/ldconfig -m /lib /usr/lib /usr/lib/compat'
			# Start the pkg add
			# Create the repo configuration file
			mkdir -p \${NANO_WORLDDIR}/usr/local/etc/pkg/repos
			cat <<EOF > \${NANO_WORLDDIR}/usr/local/etc/pkg/repos/myrepo.conf
myrepo: {
 url: "file:///usr/ports/packages",
 enabled: true,
 signature_type: 'none',
 assume_always_yes: true
}
FreeBSD: {
 enabled: false
}
EOF
			# Bug with pkg: not using the "-d" option prevent to install the package with error message "pkg fail to extract static"
			# Need to force assume_always_yes for avoiding bootstrap pkg confirmation too
			CR 'env ASSUME_ALWAYS_YES=true SIGNATURE_TYPE=none pkg -d add /usr/ports/packages/All/${PKG_NAME}.pkg'
			umount \${NANO_WORLDDIR}/usr/ports/packages
			umount \${NANO_WORLDDIR}/dev
			rmdir \${NANO_WORLDDIR}/usr/ports/packages
			rmdir \${NANO_WORLDDIR}/usr/ports
		}
		customize_cmd add_pkg_${port}
		"
	else
	# No pkg file: Generate add_port_NAME function
		eval "
		add_port_${port} () {
			#Need to create ${NANO_OBJ}/ports in this add_port_${port} function
			[ -d \${NANO_OBJ}/ports ] || mkdir -p \${NANO_OBJ}/ports/packages
			mount -t nullfs \${NANO_SRC} \${NANO_WORLDDIR}/usr/src
			mkdir -p \${NANO_WORLDDIR}/usr/ports
			mount -t nullfs \${PORTS_SRC} \${NANO_WORLDDIR}/usr/ports
			mkdir -p \${NANO_WORLDDIR}/usr/ports/packages
			mount -t nullfs \${NANO_OBJ}/ports/packages \
				\${NANO_WORLDDIR}/usr/ports/packages
			mkdir -p \${NANO_WORLDDIR}/dev
			mount -t devfs devfs \${NANO_WORLDDIR}/dev
			mkdir -p \${NANO_WORLDDIR}/usr/pobj
			mkdir -p \${NANO_WORLDDIR}/usr/workdir
			cp /etc/resolv.conf \${NANO_WORLDDIR}/etc/resolv.conf
			# If a port have NO_PACKAGE, comment-it
			if grep -q NO_PACKAGE \${NANO_WORLDDIR}/usr/ports/$1/Makefile; then
				mv \${NANO_WORLDDIR}/usr/ports/$1/Makefile \${NANO_WORLDDIR}/usr/ports/$1/Makefile.nanobsd
				sed 's/NO_PACKAGE/\#NO_PACKAGE/g' \${NANO_WORLDDIR}/usr/ports/$1/Makefile.nanobsd > \${NANO_WORLDDIR}/usr/ports/$1/Makefile
			fi
			# Run ldconfig before
			CR '/sbin/ldconfig -m /lib /usr/lib /usr/lib/compat'
			# Start the build
			CR 'env OSVERSION=${FBSD_DST_OSVERSION} \
				UNAME_r=${FBSD_DST_RELEASE} UNAME_v=\"FreeBSD ${FBSD_DST_RELEASE} ${FBSD_DST_OSVERSION}\" \
				make WRKDIRPREFIX=/usr/workdir FETCH_ARGS=-pRr -C /usr/ports/$1 \
				package install BATCH=yes \
				WITHOUT=\"INFO NLS X11 DOCS DOXYGEN EXAMPLES\" "$2" clean'
			# add a -DWITH_DEBUG before the $2 for building port with debug
			# and comment the strip command

			rm \${NANO_WORLDDIR}/etc/resolv.conf
			rm -rf \${NANO_WORLDDIR}/usr/obj
			rm -rf \${NANO_WORLDDIR}/usr/pobj
			rm -rf \${NANO_WORLDDIR}/usr/workdir
			umount \${NANO_WORLDDIR}/dev
			umount \${NANO_WORLDDIR}/usr/ports/packages
			rmdir \${NANO_WORLDDIR}/usr/ports/packages
			umount \${NANO_WORLDDIR}/usr/ports
			rmdir \${NANO_WORLDDIR}/usr/ports
			umount \${NANO_WORLDDIR}/usr/src
		}
		customize_cmd add_port_${port}
		"
	fi
}

#### Ports list section #####

# Need to manually list all the package to install
# We could use "make package-depends-list | cut -d ' ' -f3" on a port
# for getting all its unordered running dependency.
# And you can use a grep "depends on .* - not found" /usr/obj/project/_.cust.add_port_port-name
# for getting the ordered list

add_port "ports-mgmt/pkg"

## Add your custom port list here (not before the ports/mgmt/pkg!) ##

# Perl
add_port "lang/perl5.36" "WITHOUT+=\"DTRACE\""

# Then we need to install net-snmp without perl modules
# net-snmp support is not very good for FreeBSD, disable it
#add_port "net-mgmt/net-snmp" "-DWITH_MFD_REWRITES -DWITHOUT_TKMIB -DWITH_DUMMY -DWITHOUT_PERL_EMBEDDED -DWITHOUT_PERL"

# Extended bsnmpd modules:
add_port "net-mgmt/bsnmp-regex"
add_port "net-mgmt/bsnmp-ucd"

# Python (install this port soon)
 add_port "print/indexinfo"
 add_port "devel/libffi"
 add_port "devel/readline"
 add_port "math/mpdecimal"
 add_port "lang/python311"
 add_port "lang/python3"
add_port "lang/python"
add_port "devel/py-setuptools"

# RPKI RTR client library
# libssh build needs cmake, perl and libiconv
 add_port "converters/libiconv"
 add_port "archivers/lzo2"
  add_port "devel/py-packaging"
 add_port "archivers/liblz4"
 add_port "archivers/brotli"
 add_port "archivers/zstd"
  add_port "textproc/expat2"
 add_port "ftp/curl" "WITH=\"GSSAPI_NONE\" WITHOUT+=\"GSSAPI_BASE IDN IMAP GOPHER HTTP2 LIBSSH2 POP3 PSL RTSP SMTP TELNET\""
 add_port "devel/jsoncpp"
 add_port "security/libssh"
add_port "net-mgmt/rtrlib"

# FRRouting: routing daemon
 add_port "devel/json-c"
  add_port "devel/pcre2"
 add_port "net/libyang2"
 add_port "dns/c-ares"
 add_port "devel/libunwind"
   add_port "devel/abseil"
	# Already needed to build libssh
   # add_port "devel/jsoncpp"
  add_port "devel/protobuf"
 add_port "devel/protobuf-c"
add_port "net/frr10" "WITH=\"MULTIPATH\""
add_port "net/frr10-pythontools"

# FRR installs some software that we don't need anymore after install:
# devel/libtool*, devel/gettext, /devel/gmake, /lang/gawk

# Bird: routing daemon
add_port "net/bird2"

# add_port "security/cyrus-sasl2"
# add_port "net/openldap25-client" "WITHOUT+=\"GSSAPI\""
#add_port "security/ipsec-tools" "WITH=\"RC5 IDEA RADIUS LDAP\""

# strongswan: IKEv2 and lot's more
add_port "security/strongswan" "WITH=\"MEDIATION GCM\" WITHOUT+=\"EAPAKA3GPP2 EAPSIMFILE SQLITE UNBOUND LOADTESTER TESTVECTOR\""

# pmacct: IP accounting tool
 add_port "devel/libcdada"
add_port "net-mgmt/pmacct"

# ARP level "ping" utility
 add_port "net/libnet"
add_port "net/arping"

# smcroute: Manipulate the multicast routes
# Fail to build with error:
# /usr/include/netinet/ip_mroute.h:350:17: error: field has incomplete type 'struct callout'
#add_port "net/smcroute"

# mrouted: IPv4 DVMRP (multicast) routing daemon
add_port "net/mrouted"

# pimdd: IPv4 PIM Dense Mode daemon
add_port "net/pimdd"

# pimd: IPv4 PIM Sparse Mode daemon
add_port "net/pimd"

# tayga: userland NAT64 implementation
add_port "net/tayga"

# dnsmasq:	DHCP server, DNS forwarder
add_port "math/gmp"
add_port "security/nettle"
add_port "dns/dnsmasq"
# DHCP server and client
add_port "net/isc-dhcp44-server"
#add_port "net/isc-dhcp44-relay"
add_port "net/dhcprelya"

#KAME DHCP6 client, server, and relay
add_port "net/dhcp6"

# fswatch-mon: file change monitor (used for auto_save configuration)
add_port "filesystems/fswatch-mon"

# monit: managing and monitoring processes tool
add_port "sysutils/monit"
 add_port "net-mgmt/nagios-plugins"
add_port "net-mgmt/nrpe"
# Already needed to build libssh
# add_port "converters/libiconv"
 add_port "sysutils/xxd"
add_port "editors/vim" "FLAVOR=console"

# tmux: screen equivalent, but better because BSD
 add_port "devel/libevent"
 add_port "textproc/utf8proc"
 add_port "devel/ncurses"
add_port "sysutils/tmux"

# ipmi tools
add_port "sysutils/ipmitool"

# sudo: fine permission management
add_port "security/sudo"

# mpd5: multi-link PPP protocol server (netgraph dependent)
add_port "net/mpd5"

add_port "net/pkt-gen"
#add_port "net/netmap-ipfw"
 add_port "textproc/libucl"
add_port "net/netmap-fwd"

# Wiregurad tools
 add_port "shells/bash"
add_port "net/wireguard-tools"

# Tailscale
#add_port "security/tailscale"

# mlvpn: Link aggregator
 add_port "devel/libev"
 add_port "security/libsodium"
add_port "net/mlvpn"

# openvpn
 add_port "security/easy-rsa"
 add_port "security/pkcs11-helper"
add_port "security/openvpn" "WITH+=\"DCO\""
  add_port "security/libgpg-error"
 add_port "security/libgcrypt"
add_port "security/openvpn-auth-radius"

# Realtek official drivers
add_port "net/realtek-re-kmod"

# tinc
add_port "security/tinc"

# some benchmark tools: iperf ant netpipe, These tools will help us to tune BSDRP for better perf
add_port "benchmarks/netperf" "WITHOUT+=\"OMNI\""
add_port "benchmarks/iperf"
add_port "benchmarks/iperf3"

# LLDP daemon
add_port "net-mgmt/lldpd" "WITHOUT+=\"BASH JSON SNMP XML\""

# ExaBGP: having fun with BGP
add_port "net/exabgp4"
add_port "net/mrtparse"

# VM tools (about 10MB)
# VM tools brings too lot's of deps: Need to delete them all after installing (if there are used for build only)
# Into cleanup_ports(), remove libiconv from the list too or it will delete all port that depends from it
 #add_port "converters/libiconv" # already added
 add_port "devel/gettext-runtime"
 add_port "filesystems/fusefs-libs"
  add_port "textproc/libxml2"
  add_port "devel/pcre"
  #add_port "devel/py-packaging"
 add_port "devel/glib20"
  add_port "net/libpfctl"
 add_port "net/libdnet"
 add_port "archivers/libmspack"
 add_port "emulators/open-vm-kmod"
add_port "emulators/open-vm-tools" "FLAVOR=nox11"

# Permit BIOS upgrade
  add_port "misc/pciids"
 add_port "devel/libpci"
#add_port "sysutils/flashrom" "WITHOUT+=\"DMIDECODE FTDI\""
add_port "sysutils/x86info"

# amd64 only ports

if [ "$(uname -p)" = "amd64" ]; then
	# Permit microcode upgrade
  add_port "sysutils/cpu-microcode-rc"
  add_port "sysutils/cpu-microcode-amd"
  add_port "sysutils/cpu-microcode-intel"
add_port "sysutils/cpu-microcode"

	# processor information (usefull for checking microcode version)
 add_port "devel/simdjson"
add_port "sysutils/intel-pcm"

	# One tool to resume them al
add_port "net-mgmt/nstat"
fi

# Continuously displays information regarding the packet traffic
# Build broken
#add_port "net/trafshow"

# Network aware cat
add_port "net/nc"

# NANOG traceroute : MPLS label decode, Path MTU discovery, AS lookup, spray mode
add_port "net/ntraceroute"

# MTR combines traceroute and ping
add_port "net/mtr" "FLAVOR=nox11 WITHOUT+=\"JSON\""

# BGPQ3: Lightweight prefix-list generator for Cisco and Juniper routers
add_port "net-mgmt/bgpq4"

# ixl_unlock: Allow to remove SFP restriction to ixl(4)
add_port "net/ixl_unlock"

# Mellanox Firmware Burning and Diagnostics Tools
#add_port "sysutils/mstflint" "WITH+=\"FWMANAGER ADAB\""

# my ASCII network diagram tool
add_port "net/graphpath"

# Quagga/FRR BGP route generator
add_port "net/quagga-bgp-netgen"

# sysutils/dtrace-toolkit
add_port "sysutils/dtrace-toolkit"

#### End of port list section ####

# Add netrate tools
customize_cmd add_netrate

cleanup_ports () {
	# When port are build, they install build dependency that are not usefull for running the port
	# The list of build-only package to be delete can be found like this:
	# 1. Comment the clean-up line
	# 2. Generate a BSDRP image with -c option (remove all previous obj tree)
	# 3. Copy generated packages.info as packages.info.full
	# 4. Restart a BSDRP image build with the "-b" option
	# 5. sdiff -s package.info.full package.info.lite
	BUILD_DEP='
autoconf
autoconf-switch
autoconf-wrapper
automake
automake-wrapper
binutils
bison
boost-jam
boost-libs
cmake
cmocka
docbook
expat
gcc
gawk
gettext
gettext-tools
gmake
go
go14
help2man
iso8879
libarchive
libnghttp2
libsigsegv
libtool
libtextstyle
libuv
libxslt
m4
mpfr
mpc
ninja
p5-gettext
p5-Locale-libintl
p5-Text-Unidecode
p5-Unicode-EastAsianWidth
pkgconf
python27
py311-Babel
py311-calver
py311-cython
py311-editables
py311-Jinja2
py311-MarkupSafe
py311-alabaster
py311-asn1crypto
py311-build
py311-certifi
py311-cffi
py311-chardet
py311-charset-normalizer
py311-cryptography
py311-docutils
py311-enum34
py311-flit-core
py311-installer
py311-idna
py311-imagesize
py311-importlib-metadata
py311-openssl
py311-pathspec
py311-pluggy
py311-pycparser
py311-pyproject_hooks
py311-pygments
py311-pyparsing
py311-pystemmer
py311-pysocks
py311-pytest-runner
py311-pytz
py311-setuptools_scm
py311-six
py311-snowballstemmer
py311-sphinx*
py311-tomli
py311-trove-classifiers
py311-typing
py311-typing-extensions
py311-urllib3
py311-zipp
py311-wheel
rhash
scons
sdocbook-xml
texinfo
xmlcatmgr
xmlcharent
'
		mount -t devfs devfs ${NANO_WORLDDIR}/dev
		for pkg in ${BUILD_DEP}; do
			CR "env ASSUME_ALWAYS_YES=true SIGNATURE_TYPE=none pkg delete -iy $pkg" || true
		done
		umount ${NANO_WORLDDIR}/dev
}

customize_cmd cleanup_ports

# BSDRP custom function
bsdrp_custom () {
	# Replace BSDRP_VERSION in /boot/lua/brand-bsdrp.lua with the version number in etc/version
	sed -i "" -e /BSDRP_VERSION/s//$(cat ${NANO_WORLDDIR}/etc/version)/ ${NANO_WORLDDIR}/boot/lua/brand-bsdrp.lua
	# Disable reverse DNS in sshd:
	echo "UseDNS no" >> ${NANO_WORLDDIR}/etc/ssh/sshd_config
	# Update login.conf db
	CR 'cap_mkdb /etc/login.conf'

	chmod 600 ${NANO_WORLDDIR}/boot/entropy
	# Disable system beep and enable color with csh
	{
	echo "set nobeep"
	echo "setenv CLICOLOR true"
	} >> ${NANO_WORLDDIR}/etc/csh.cshrc

	# cpio (cust_install_file) doesn't support symlink
	# relocate /root/.ssh to /etc/dot.root.ssh
	# This permit to save ssh keys
	mkdir -p ${NANO_WORLDDIR}/etc/dot.ssh.root
	ln -s ../etc/dot.ssh.root ${NANO_WORLDDIR}/root/.ssh

	# relocate /root/.* to /etc/dot.*
	ln -s ../etc/dot.vimrc ${NANO_WORLDDIR}/root/.vimrc
	rm ${NANO_WORLDDIR}/root/.shrc
	ln -s ../etc/dot.shrc ${NANO_WORLDDIR}/root/.shrc
	ln -s ../etc/dot.complete ${NANO_WORLDDIR}/root/.complete
	rm ${NANO_WORLDDIR}/root/.cshrc
	ln -s ../etc/dot.cshrc ${NANO_WORLDDIR}/root/.cshrc

	# turn on noatime for /cfg
	sed -i "" -e "/cfg/s/rw/rw,noatime/" ${NANO_WORLDDIR}/etc/fstab
	# Add /data partition to fstab (config script use it for archiving old configurations)
	echo "/dev/ufs/${NANO_LABEL}s4 /data ufs rw,noauto,failok 0 0" >> ${NANO_WORLDDIR}/etc/fstab
	[ -d ${NANO_WORLDDIR}/data ] || mkdir -p ${NANO_WORLDDIR}/data
	# Add fdesc (mandatory to use bash) and procfs to fstab
	(
	echo "fdesc   /dev/fd         fdescfs         rw      0       0"
	echo "proc    /proc           procfs          rw      0       0"
	) >> ${NANO_WORLDDIR}/etc/fstab

	# relocate /var/cron to /etc/cron
	# This permit to save crontab (only /etc and /usr/local/etc are saved)
	mkdir -p ${NANO_WORLDDIR}/etc/cron
	rm -rf ${NANO_WORLDDIR}/var/cron
	ln -s ../etc/cron ${NANO_WORLDDIR}/var/cron

	# configure bsnmp
	cat <<EOF >>${NANO_WORLDDIR}/etc/snmpd.config

#
# bsnmp-ucd (8)
#
begemotSnmpdModulePath."ucd" = "/usr/local/lib/snmp_ucd.so"

#
# bsnmp-regex (8)
#
#begemotSnmpdModulePath."regex" = "/usr/local/lib/snmp_regex.so"
#			%regex
#			regexConfig = "/usr/local/etc/bsnmp-regex.conf"
#			regexSocket = "/var/run/bsnmp-regex.sock"
EOF

	# Set FRR permission
	grep -q frr ${NANO_WORLDDIR}/etc/passwd && \
		CR 'chown -R frr:frr /usr/local/etc/frr'

	# Compress the kernel (save 10Mb)
	# Disabled: dtrace didn't support compressed kernel
	#if [ -f ${NANO_WORLDDIR}/boot/kernel/kernel ]; then
	#	if ! gzip -v9 ${NANO_WORLDDIR}/boot/kernel/kernel; then
	#		echo "Error during zipping the kernel"
	#	fi
	#fi
	# Remove some of the folders (without share/snmp)
	# usr/include : 15MB
	FOLDERS_TO_REMOVE='
usr/libexec/bsdinstall
usr/local/BSDRP
usr/local/include
usr/local/info
usr/include
usr/share/examples
usr/share/info
usr/share/man/man3
usr/share/man/man9
usr/share/me
usr/share/pc-sysinstall
usr/share/openssl
usr/share/syscons
usr/libdata/lint
usr/libdata/ldscripts
'
	for c in $FOLDERS_TO_REMOVE; do
		if [ -d ${NANO_WORLDDIR}/$c ]; then
			echo "Removing ${NANO_WORLDDIR}/$c"
			if ! rm -rf ${NANO_WORLDDIR}/$c ; then
				echo "Error: Can't remove it!"
			fi
		fi
	done

	# Remove some files not compliant with WITHOUT_ and tool chain
	# All ports are compiled, then we can remove all TOOLCHAIN files
	# This save about 25MB.
	# The list of these files was generated by a the output of:
	# usr/src/tools/tools/build_option_survey
	# Because it's a very time consuming script, output are online:
	# https://people.freebsd.org/~olivier/build_option_survey_20160406/

	FILES_TO_REMOVE='
boot/boot1.efi
boot/boot1.efifat
boot/loader.efi
usr/sbin/ctladm
usr/bin/ctlstat
usr/local/etc/rc.d/freevrrpd.sh.sample
usr/local/sbin/pkg-static.pkgsave
usr/local/sbin/pkg-static
usr/share/misc/magic.mgc
usr/share/misc/termcap.db
var/db/services.db
usr/bin/CC
usr/bin/addr2line
usr/bin/ar
usr/bin/as
usr/bin/byacc
usr/bin/c++
usr/bin/c++filt
usr/bin/c89
usr/bin/c99
usr/bin/cc
usr/bin/clang
usr/bin/clang++
usr/bin/clang-cpp
usr/bin/clang-tblgen
usr/bin/cpp
usr/bin/crunchgen
usr/bin/crunchide
usr/bin/ctags
usr/bin/file2c
usr/bin/flex
usr/bin/flex++
usr/bin/indent
usr/bin/ld
usr/bin/ld.bfd
usr/bin/lex
usr/bin/lex++
usr/bin/lint
usr/bin/llvm-tblgen
usr/bin/llvm-symbolizer
usr/bin/llvm-profdata
usr/bin/llvm-ar
usr/bin/llvm-readelf
usr/bin/llvm-cxxfilt
usr/bin/llvm-objdump
usr/bin/llvm-addr2line
usr/bin/llvm-nm
usr/bin/llvm-readobj
usr/bin/llvm-strip
usr/bin/llvm-ranlib
usr/bin/llvm-strings
usr/bin/llvm-size
usr/bin/llvm-cov
usr/bin/llvm-objcopy
usr/bin/mkstr
usr/bin/nm
usr/bin/objcopy
usr/bin/objdump
usr/bin/ranlib
usr/bin/readelf
usr/bin/rpcgen
usr/bin/size
usr/bin/strings
usr/bin/unifdef
usr/bin/unifdefall
usr/bin/xstr
usr/bin/yacc
usr/lib/libfl.a
usr/lib/libl.a
usr/lib/libln.a
usr/sbin/btxld
usr/sbin/config
'
	for c in $FILES_TO_REMOVE; do
		if [ -f ${NANO_WORLDDIR}/$c ]; then
			echo "Removing ${NANO_WORLDDIR}/$c"
			if ! rm -rf ${NANO_WORLDDIR}/$c ; then
				echo "Error: Can't remove it!"
			fi
			# look for associated man page and delete it too
			if ! find ${NANO_WORLDDIR}/usr/share/man -name $(basename $c)".*.gz" -exec rm -- {} +; then
				echo "no man page for $c"
			fi
			# look for associated debug file and delete it too
			if [ -f ${NANO_WORLDDIR}/usr/lib/debug/$c.debug ]; then
				rm ${NANO_WORLDDIR}/usr/lib/debug/$c.debug
			fi
		else
			echo "Missing file to delete: $c"
		fi
	done

	# Move termcap.small file
	if [ -f ${NANO_WORLDDIR}/etc/termcap.small ]; then
		mv ${NANO_WORLDDIR}/etc/termcap.small ${NANO_WORLDDIR}/usr/share/misc/termcap.db
	fi

	# Kill all .a's that are installed with TOOLCHAIN (remove 33MB)
	find ${NANO_WORLDDIR} -type f -name \*.a | xargs rm

	# Moving kerned & world debug symbols into debug.tar.xz file
	if [ -d ${NANO_WORLDDIR}/usr/lib/debug ]; then
		if [ -f  ${NANO_WORLDDIR}/boot/kernel/kernel.symbols ]; then
			if [ ! -d ${NANO_WORLDDIR}/usr/lib/debug/boot/kernel ]; then
				mkdir -p ${NANO_WORLDDIR}/usr/lib/debug/boot/kernel
			fi
			mv ${NANO_WORLDDIR}/boot/kernel/*.symbols ${NANO_WORLDDIR}/usr/lib/debug/boot/kernel
		fi
		tar cfvZ ${NANO_OBJ}/debug.tar.xz -C ${NANO_WORLDDIR}/usr/lib debug
		rm -rf ${NANO_WORLDDIR}/usr/lib/debug
		# relocate /usr/lib/debug to /data/debug (debug archive files needs more than 1Gb for being extracted)
		ln -s /data/debug ${NANO_WORLDDIR}/usr/lib/debug
	fi
	# strip binaries for ports (tips from FreeNAS 8)
	pprint 4 "Stripping binaries and libraries"
	for dir in $(find ${NANO_WORLDDIR}/ -name '*bin' -or -name 'lib' -maxdepth 3); do
		for f in $(find $dir -type f); do
			strip 2>/dev/null $f || :
		done
	done
	# Generate package inventory
	if [ -x ${NANO_WORLDDIR}/usr/local/sbin/pkg ]; then
		pkg -c ${NANO_WORLDDIR} query \*\ %n\ %v:\ %c > ${NANO_OBJ}/packages.info
		#CR 'pkg query \*\ %n\ %v:\ %c' > ${NANO_OBJ}/packages.info
	fi
}

# Enable only serial system only
bsdrp_console_serial () {
	# Force first 4 serial console into "onifexists" to be sure to enable them
	# but preventing polluting console with "getty ... No such file or directory"
	sed -i "" -e '/^ttyu[0]/s/onifconsole/on/' ${NANO_WORLDDIR}/etc/ttys
	sed -i "" -e '/^ttyu[1-3]/s/onifconsole/onifexists/' ${NANO_WORLDDIR}/etc/ttys
	# Enable local video devices only if they exists too
	#  this prevent to overload console with theses message:
	#  getty[7]: open /dev/ttyv1: No such file or directory
	#  init: getty repeating too quickly on port /dev/ttyv1, sleeping 30 secs
	sed -i "" -e '/^ttyv[0-4]/s/on /onifexists /' ${NANO_WORLDDIR}/etc/ttys
	# Disable some syscons devices: No need for 8 on a router
	sed -i "" -e '/^ttyv[4-8]/s/on /off /' ${NANO_WORLDDIR}/etc/ttys
	# Tell loader to use serial console early.
	echo "-S${COM_SPEED} -h" > ${NANO_WORLDDIR}/boot.config

}

# Enable use of keyboard/vga and serial
bsdrp_console_dual () {
	# Force first 4 serial console into "onifexists" to be sure to enable them
	# but preventing polluting console with "getty ... No such file or directory"
	sed -i "" -e '/^ttyu[0-1]/s/on/onifexists/' ${NANO_WORLDDIR}/etc/ttys
	sed -i "" -e '/^ttyu[2-3]/s/onifconsole/onifexists/' ${NANO_WORLDDIR}/etc/ttys
	# Tell loader to use serial and vga console, set baud speed
	echo "-S${COM_SPEED} -Dh" > ${NANO_WORLDDIR}/boot.config
}

# Standard vga console, but permit serial port to be use as vt100 console
bsdrp_console_vga () {
	# Disable some syscons devices: No need for 8 on a router
	sed -i "" -e '/^ttyv[4-8]/s/on /off /' ${NANO_WORLDDIR}/etc/ttys
	# Tell loader to use vga and serial and set serial speed (boot0 will be vga only)
	echo "-S${COM_SPEED} -Dh" > ${NANO_WORLDDIR}/boot.config
}

# Special xen console configuration
bsdrp_console_xen () {
	#Remove all default virtual terminal (in pv mode, need to check in hvm)
	sed -i '' '/^ttyv/d' ${NANO_WORLDDIR}/etc/ttys
	#Add a new xc0 console
	echo 'xc0  "/usr/libexec/getty Pc" vt100  on  secure' >> ${NANO_WORLDDIR}/etc/ttys
	#Replace the default em0 by xn0 in rc.conf
	sed -i "" -e /ifconfig_/s/em0/xn0/ ${NANO_WORLDDIR}/etc/rc.conf
}

# From FreeNAS 8
shrink_md_fbsize()
{
	# We have a lot of little files on our memory disks. Let's decrease
	# the block and frag size to fit more little files on them (this
	# halves our space requirement by ~50% on /etc and /var on 8.x --
	# and gives us more back on 9.x as the default block and frag size
	# are 4 times larger).
	sed -i '' -e 's,-S -i 4096,-S -i 4096 -b 4096 -f 512,' \
		${NANO_WORLDDIR}/etc/rc.initdiskless
}
customize_cmd shrink_md_fbsize

# Secure BSDRP by using schg flag
bsdrp_secure () {
	# TODO: Need to check if flag allready set,
	#		otherwise it will disable it
	chflags -R schg ${NANO_WORLDDIR}/bin
	chflags -R schg ${NANO_WORLDDIR}/sbin
	chflags -R schg ${NANO_WORLDDIR}/boot/kernel
	chflags -R schg ${NANO_WORLDDIR}/libexec
	chflags -R schg ${NANO_WORLDDIR}/lib
}

# Install Custom scripts and config files
customize_cmd cust_install_files

# Need to execute the bsdrp_custom after the cust_install_files
customize_cmd bsdrp_custom

# Allow root login via ssh
customize_cmd cust_allow_ssh_root

# Secure BSDRP
# TO DO: secure the BSDRP (chflags)
#customize_cmd bsdrp_secure
