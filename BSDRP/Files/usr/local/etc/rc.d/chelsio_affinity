#!/bin/sh
# Bind Chelsio interrupt threads to different cores (melifaro@FreeBSD.org)

# PROVIDE:      chelsio_affinity
# REQUIRE:      FILESYSTEMS netif
# KEYWORD:      nojail

#
# Add the following lines to /etc/rc.conf.local or /etc/rc.conf
# to enable this service:
#
# chelsio_affinity_enable (bool):   Set to YES by default.
#               Set it to YES to bind interrupt threads to different cores
# chelsio_affinity_avoidncpu (int):  0 by default.
#       Set to number of CPU to exclude from binding
# chelsio_affinity_firstcpu (int): 0 by default.
#       Allow to avoid a first range of CPU (for skiping a numa-domain)

. /etc/rc.subr

name="chelsio_affinity"
rcvar=${name}_enable

start_cmd="chelsio_affinity_start"

increment_cpu_in_domain() {
   desired_domain=$1
   # increment
   CPU=$(((CPU + 1) % NCPU))
   # if we are not in the domain, just keep incrementing until we find the right domain
   while [ $( numa_lookup ) -ne $desired_domain ]; do
       # add one, modulus total number
       CPU=$(((CPU + 1) % NCPU))
       # Check for rolling back to zero
       if [ ${CPU} -le ${chelsio_affinity_firstcpu} ]; then
           CPU=${chelsio_affinity_firstcpu}
       fi
   done
}

numa_lookup() {
    sysctl -n dev.cpu.${CPU}.%domain
}

bind_ports() { 
    # set some variables
    card_type=$1
    card_index=$2
    card=${card_type}${card_index}
    dev=dev.${card_type}.${card_index}
    # find domain of this card
    card_domain=`sysctl -n ${dev}.%domain`
    echo "$card on numa-domain ${card_domain}"
    # find ports
    ports=`sysctl -n ${dev}.nports 2> /dev/null`
    if [ ! -z $ports ]; then 
        echo " $card has $ports ports"
        # Check to see if we are in the correct domain
        if [ $( numa_lookup ) -ne $card_domain ]; then
            increment_cpu_in_domain ${card_domain}
        fi
        # Iterate through ports on this card
        for port in $(seq 0 $((ports - 1))); do
            echo "  $card port $port"
            for IRQ in `/usr/bin/vmstat -ai |\
                /usr/bin/sed -nE "/${card}:${port}a/s/irq([[:digit:]]+):.*/\1/p"`; do
                echo "   Bind ${card}:${port}a IRQ ${IRQ} to CPU ${CPU}"
                /usr/bin/cpuset -l ${CPU} -x ${IRQ}
                # increment again CPU variable, maintaining domain for this card
                increment_cpu_in_domain ${card_domain}
            done
        done
    fi
}

chelsio_affinity_start()
{
    # Need a Chelsio Card, lets look ofr T5 and T6 cards
    Nt5=`sysctl dev.t5nex | grep -c nports`
    Nt6=`sysctl dev.t6nex | grep -c nports`

    if [ $Nt5 -eq 0 ] && [ $Nt6 -eq 0 ]; then
        echo "No Chelsio card detected"
        exit 0;
    fi
    echo "T5 cards: $Nt5 and T6 cards: $Nt6"

    # Work with 2 CPU minimum
    NCPU=$(/sbin/sysctl -n hw.ncpu)
    if [ ${NCPU} -le 2 ]; then
        echo "Not enought CPU detected"
        exit 0
    fi

    # Exclude some CPU from binding
    NCPU=$((NCPU - ${chelsio_affinity_avoidncpu}))
    CPU=${chelsio_affinity_firstcpu}

    # iterate through cards and bind queues on every card/port/queue combo to cpus
    if [ $Nt5 -gt 0 ]; then
        for j in $(seq 0 $((Nt5 - 1))); do
            bind_ports t5nex $j
        done
    fi
    if [ $Nt6 -gt 0 ]; then
        for j in $(seq 0 $((Nt6 - 1))); do
            bind_ports t6nex $j
        done
    fi
}

load_rc_config $name

: ${chelsio_affinity_enable="NO"}
: ${chelsio_affinity_avoidncpu=0}
: ${chelsio_affinity_firstcpu=0}

run_rc_command "$1"
