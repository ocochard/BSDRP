#!/bin/sh
#
# Upgrade tool for BSD Router Project
# https://bsdrp.net
#
# Copyright (c) 2009-2025, The BSDRP Development Team
# All rights reserved.
# Based on the updatep1 and updatep2 script of nanoBSD
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#

#######################
##  Example of Usage ##
#######################

# Put the compressed _.disk.image on my-router, in the  home dir of my-user,
# and from the nanoBSD device, enter this command:
# ssh my-user@my-router cat _.disk.image.xz | xzcat | upgrade

# Strict script
set -eu

# Variables
ARCH=$(uname -m)
GPT=false
LOCK=/tmp/UPGRADE-LOCK

# A usefull function (from: http://code.google.com/p/sh-die/)
die() {
	echo -n "EXIT: " >&2
	echo "$@" >&2
	[ -f ${LOCK} ] && rm ${LOCK}
	exit 1
}

#Load the NANO_DRIVE variable (ufs/BSDRP or gpt/BSDRP):
[ -f /etc/nanobsd.conf ] || die "No /etc/nanobsd.conf found"
. /etc/nanobsd.conf

#Extract LABEL name
LABEL=${NANO_DRIVE##*/}

# Verbose umount: Give detail of why it can't unmount
# $1: mount point to umount
# return 0: ok
# return 1: failed, and display troubleshooting data
v_umount () {
	mount=$1
	[ -z "${mount}" ] && die "Bug calling $0: Empty argument"
	[ -d "${mount}" ] || die "Bug calling $0: Not a directory"
	if ! mount | grep -E -q "[[:space:]]on[[:space:]].*${mount}[[:space:]]"; then
		echo "WARNING: ${mount} is not mounted!"
	else
		if ! umount ${mount}; then
			echo "Can't unmount ${mount}, here is processes list using it:"
			fstat | grep "${mount}" || true
			return 1
		fi
	fi
	return 0
}

# Populate boot device and labels informations
get_boot_info() {
	BSD_SLICE=""
	mountfrom=$(kenv vfs.root.mountfrom)
	# MBR (nanobsd): "ufs:/dev/ufs/BSDRPs1a"
	# GPT (poudriere): "ufs:/dev/gpt/BSDRP1"
	# Removing prefix "ufs:"
	mountfrom=$(echo ${mountfrom} | cut -d ':' -f 2)
	# /dev/ufs/BSDRPs1a (old nanobsd) or /dev/gpt/BSDRP1 (fresh poudriere-image)
	# or /dev/ufs/BSDRPs2 (converted from nanobsd to poudriere-image)

	# Now we could extract the label ID ('NANO_DRIVE=ufs/BSDRP')
	CURRENT_LABEL_ID=$(echo ${mountfrom} | awk -F"${NANO_DRIVE}" '{print $2}')
	# s1a (MBR), s1 (converted MBR), or 1 (GPT)
	# Removing prefix /dev/
	mountfrom=${mountfrom#/dev/}
	# ufs/BSDRPs1a or gpt/BSDRP1 or ufs/BSDRPs1
	BOOT_DEV=$(glabel status | awk -v label=$mountfrom '$1 == label {print $3}')
	# ada0s1a (MBR) or ada0p3 (GPT) or adas1 (converted)
	# Need to resolve the disk name, by removing the CURRENT_LABEL_ID at the end:
	BOOT_DEV=${BOOT_DEV%${CURRENT_LABEL_ID}}
	[ -z "${BOOT_DEV}" ] && die "Bug in get_boot_info: BOOT_DEV can't be empty"
	BOOT_DEV="/dev/${BOOT_DEV}"
	[ -c "${BOOT_DEV}" ] || die "Bug in get_boot_info: ${BOOT_DEV} need to be special char device"
	# Populating all the others variables
	if echo ${mountfrom} | grep -q 'ufs/'; then
		# On a NanoBSD MBR system, partition number/name map is:
		# s1 is UFS with BSD slice a: first system partition (UFS label: NAMEs1a)
		# s2 if UFS with BSD slice a: second system partition (UFS label: NAMEs2a)
		# On a converted from NanoBSD MBR system, no BSD slice used
		GPT=false
		if [ "${CURRENT_LABEL_ID}" = "s1a" ] || [ "${CURRENT_LABEL_ID}" = "s1" ]; then
			CURRENT_SLICE="s1"
			CURRENT_PART="1"
			NEXT_SLICE="s2"
			NEXT_PART="2"
		elif [ "${CURRENT_LABEL_ID}" = "s2a" ] || [ "${CURRENT_LABEL_ID}" = "s2" ]; then
			CURRENT_SLICE="s2"
			CURRENT_PART="2"
			NEXT_SLICE="s1"
			NEXT_PART="1"
		else
			die "Bug in get_boot_info: MBR label ID not equal to s[12][a]"
		fi
		if echo ${CURRENT_LABEL_ID} | grep -q 'a$'; then
			# NanoBSD MBR
			BSD_SLICE="a"
		fi
		NEXT_LABEL_ID="${NEXT_SLICE}${BSD_SLICE}"

	elif echo ${mountfrom} | grep -q 'gpt/'; then
		# On a GPT system, partition number/name map is:
		# p1 is msdosfs/EFI
		# p2 is freebsd-boot
		# p3 is first system with NAME1
		# p4 is second system with NAME2
		GPT=true
		if [ "${CURRENT_LABEL_ID}" -eq 1 ]; then
			CURRENT_SLICE="p3"
			CURRENT_PART="3"
			NEXT_SLICE="p4"
			NEXT_PART="4"
			NEXT_LABEL_ID="2"
		elif [ "${CURRENT_LABEL_ID}" -eq 2 ]; then
			CURRENT_SLICE="p4"
			CURRENT_PART="4"
			NEXT_SLICE="p3"
			NEXT_PART="3"
			NEXT_LABEL_ID="1"
		else
			die "Bug in get_boot_info: GPT label ID not equal to 1 neither 2"
		fi
	else
		die "Do not found reference of /dev/ufs or /dev/gpt in vfs.root.mountfrom"
	fi
}

write_new_image() {

	# Blow away old system.
	dd if=/dev/zero of="${BOOT_DEV}${NEXT_SLICE}" bs=1M count=1 > /dev/null 2>&1 || \
		die "ERROR: Can't initialize destination partition ${BOOT_DEV}${NEXT_SLICE}"

	# Copy in new system
	dd of="${BOOT_DEV}${NEXT_SLICE}" bs=1M || \
		die "ERROR: Can't install the upgrade on ${BOOT_DEV}${NEXT_SLICE}"

	# Check that it worked
	# poudriere-image doesn't use anymore BSD_SLICE
	if ! [ -c "${BOOT_DEV}${NEXT_SLICE}${BSD_SLICE}" ]; then
		BSD_SLICE=""
	fi
	fsck_ffs -n "${BOOT_DEV}${NEXT_SLICE}${BSD_SLICE}" || \
		die "ERROR: New file system ${BOOT_DEV}${NEXT_SLICE}${BSD_SLICE} check failed"

	# During an upgrade from nanobsd to poudriere-image, we need to remove BSD_SLICE
	# To detect we are in upgrade process, at this stage BSD_SLICE should be empty
	# but NEXT_LABEL_ID should still reference it
	if [ -z "${BSD_SLICE}" ]; then
		if echo "${NEXT_LABEL_ID}" | grep -q 'a$'; then
			# Upgrading to poudriere-image, need to remove 'a' from variables
			NEXT_LABEL_ID=${NEXT_LABEL_ID%a}
		fi
	fi
	# Set UFS label into the new slice (MBR only)
	if [ "${GPT}" = false ]; then
		tunefs -L ${LABEL}${NEXT_LABEL_ID} ${BOOT_DEV}${NEXT_SLICE}${BSD_SLICE} || \
			die "ERROR: Can't put UFS label on the new filesystem"
	fi

	# Need to tune some files on the new partition
	[ -d /tmp/sysupgrade ] || mkdir /tmp/sysupgrade

	mount /dev/${NANO_DRIVE}${NEXT_LABEL_ID} /tmp/sysupgrade || \
		die "ERROR: Can't mount new upgrade image"

	# Kept the /boot/loader.conf.local file
	if [ -f /boot/loader.conf.local ]; then
    	cp /boot/loader.conf.local /tmp/sysupgrade/boot || \
        	echo "WARNING: Can't backup /boot/loader.conf.local"
	fi

	# Preserve /boot.config if it's different or not existing
	# If "system dual-console" was used, this case is triggered
	# If user have changed serial speed, this case is triggered
	if [ -f /boot.config ]; then
		if ! cmp -s /boot.config /tmp/sysupgrade/boot.config; then
			cp /boot.config /tmp/sysupgrade/boot.config || \
       			echo "WARNING: Can't backup /boot.config"
		fi
	fi

	# Need to stop autosave before touching /etc/fstab
	service autosave onestop || true

	# Wait 30 seconds for autosave finish current backup
	i=0
	while [ -f /var/run/autosave.bsdrp.lock ]; do
		sleep 1
		i=$((i + 1))
		printf "Waiting for autosave: %s second before timeout" $((30 - i))
		if [ "$i" -eq 30 ]; then
			echo "Autosave timeout expired, but will continue"
			break
		fi
	done

	# Adapt fstab of the new system
	# New poudriere-image will have such lines:
	# /dev/gpt/BSDRP1 / ufs ro 1 1
	# /dev/gpt/cfg
	# /dev/gpt/data
	# But old nanobsd will have:
	# /dev/ufs/BSDRPs1a / ufs ro 1 1
	# /dev/ufs/BSDRPs3
	# /dev/ufs/BSDRPs4
	sed -i "" "s/${LABEL}${CURRENT_LABEL_ID}/${LABEL}${NEXT_LABEL_ID}/g" /etc/fstab
	for f in /tmp/sysupgrade/etc/fstab /tmp/sysupgrade/conf/base/etc/fstab; do
		cp /etc/fstab $f
	done

	# Same problem with conf/default/etc/remount that need to take care of
	if ! cmp -s /tmp/sysupgrade/conf/default/etc/remount /conf/default/etc/remount; then
		cp /conf/default/etc/remount /tmp/sysupgrade/conf/default/etc/remount
	fi

	if ! cmp -s /tmp/sysupgrade/conf/base/etc/nanobsd.conf /conf/base/etc/nanobsd.conf; then
		for d in /tmp/sysupgrade/etc/ /tmp/sysupgrade/conf/base/etc/; do
			cp /etc/nanobsd.conf $d
		done
	fi
	# Check if there is a post-upgrade script on the new image
	# (This script will be start at the end of the upgrade process)
	if [ -f /tmp/sysupgrade/usr/local/sbin/post-upgrade ]; then
		cp /tmp/sysupgrade/usr/local/sbin/post-upgrade /tmp/post-upgrade || \
			echo "WARNING: Can't copy post-upgrade script!"
	fi

	v_umount /tmp/sysupgrade || die "ERROR: Can't umount new image partition"

	rm -r /tmp/sysupgrade || echo "WARNING: Can't remove tempdir"

	# Save the fstab to /cfg
	if mount | ! grep -q 'on /cfg ('; then
		mount /cfg || die "ERROR: Cant't mount /cfg"
	fi
	if ! cp /etc/fstab /cfg; then
		v_umount /cfg || echo "Can't unmount /cfg"
		die "ERROR: Can't save fstab"
	fi

	v_umount /cfg || die "ERROR: Can't umount /cfg"
	return 0
}

mbr_boot_modif () {
	# Change the default selection of the boot manager
	boot0cfg -s ${NEXT_PART} -t 18 -v ${BOOT_DEV} || \
        die "ERROR: Can't update FreeBSD bootloader"
	# Change the active partition
	gpart set -a active -i ${NEXT_PART} ${BOOT_DEV} || \
		die "ERROR: Can't update active partition"
	return 0
}

gpt_boot_modif () {
	# Change the active partition
	gpart set -a bootme -i ${NEXT_PART} ${BOOT_DEV} || \
		die "ERROR: Can't add bootme flag to new system slice"
	gpart unset -a bootme -i ${CURRENT_PART} ${BOOT_DEV} || \
		die "ERROR: Can't remove bootme flag from old system slice"
	return 0
}

arm_boot_modif () {
	echo "arm upgrade script not tested!"
	gpart set -a active -i ${NEXT_PART} ${BOOT_DEV} || \
		die "ERROR: Can't update active partition"
	return 0
}

boot_modif () {
	if ($GPT); then
		gpt_boot_modif
	else
		mbr_boot_modif
	fi
	return 0
}

#### main function

# Check lock

if [ -f ${LOCK} ]; then
	die "Another upgrade already running"
else
	touch ${LOCK}
fi

case "${ARCH}" in
	i386|amd64)
		get_boot_info
		write_new_image
		boot_modif
		;;
	arm)
		echo "WARNING: This script was never tested on ARM"
		get_boot_info
		write_new_image
		arm_boot_modif
		;;
	*)
		die "Unsupported arch!"
esac

# Log
echo "${LABEL} Upgrade complete"
logger ${LABEL} Upgrade complete

if [ -f /tmp/post-upgrade ]; then
	echo "Starting post-upgrade script..."
	logger Starting post-upgrade script
	chmod +x /tmp/post-upgrade
	# Execute post-upgrade script with new partition as parameter
	/tmp/post-upgrade /dev/${NANO_DRIVE}${NEXT_LABEL_ID}
fi

[ -f ${LOCK} ] && rm ${LOCK}
