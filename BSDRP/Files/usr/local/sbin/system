#!/bin/sh
#
# System tool for BSD Router Project
# https://bsdrp.net
#
# Copyright (c) 2009-2025, The BSDRP Development Team
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#

# Uncomment for enable the debug mode:
#set -xv

# Strict script
set -eu

# A usefull function (from: http://code.google.com/p/sh-die/)
die() { echo -n "EXIT: " >&2; echo "$@" >&2; exit 1; }

# get system name label
get_label () {
	local label=$(cut -d '/' -f 2 /etc/nanobsd.conf)
	[ -n "${label}" ] && echo ${label} || die "Can't retrieve nanobsd label"
}

# Display User confirmation message
# $1: message
# exit if user enter 'n'
# return 0 if user enter 'y'
user_confirm () {
	local input=""
	echo -n $1
	while [ "${input}" != "y" -a "${input}" != "n" ]; do
		read input <&1
	done
	[ "${input}" = "n" ] && exit 0 || return 0
}

# Check if a partition is mounted
# $1: Partition to be checked (like /data)
# return 0: yes
# return 1: No
is_mounted () {
	[ -z "$1" ] &&  die "BUG: is_mounted() need argument"
	mount | grep -q -e "[[:space:]]$1[[:space:]]" && return 0 || return 1
}

# Return true if $1 is an integer
is_integer () {
	case "${1#[+-]}" in
		(*[!0123456789]*)	return 1 ;;
		('')				return 1 ;;
		(*)					return 0 ;;
    esac
}

# Resolve ufs or gpt label to physical disk name
# ufs/BSDRP -> ada0
# $1: NANO_DRIVE label
label2dev () {
	local output=$(glabel status | grep -E "$1(s1a|s1|1)" \
		| awk '{ s=$3; sub(/[s|p][1-4]a?$/, "", s); print s; }')
	[ -n "${output}" ] && echo ${output} || die "BUG in label2dev: Can't retrieve disk name"
}

# Resolve partition number from gpt|ufs label
label2part () {
	# $1: label of gpt|ufs partition in form ufs/xxx or gpt/xxx
	local output=$(glabel status | grep -E "$1" \
		| awk '{ split($3,a,"p|s"); print a[2]}' | cut -d a -f 1)
	if [ -z "${output}" ]; then
		die "BUG in mount2label(): Empty result"
	fi
	if is_integer ${output}; then
		echo ${output}
	else
		die "BUG in mount2label(): Partition number not an integer (${output})"
	fi
}

# Return gpt|ufs label from the mount point
# $1: mount point (/, /data, /cfg, etc)
mount2label () {
	local output=$(grep -w $1 /etc/fstab | cut -d ' ' -f 1 | cut -d '/' -f 3-4)	# ufs/BSDRPs4
	[ -n "${output}" ] && echo ${output} || die "BUG in mount2label: Can't retrieve label from mount"
}

# Display help
usage () {
	echo "BSD Router Project: system tool"
	case ${SECOND_OPTION} in
	integrity)
		echo "Check system integrity using a reference mtree file"
		echo "The given file can be .mtree, .mtree.bz2 or .mtree.xz"
		echo "Note: Do not keep the reference mtree file on the router!"
		exit 0
		;;
	esac
	# value $0 is the name of the called script
	echo "Usage: $0 option"
	echo "  - expand-data-slice     : Permit to grow the /data partition size"
	echo "  - dual-console          : Configure the system for dual vga/serial console"
	echo "  - install [destination] : Install system to disk given in option"
	echo "  - integrity filename    : Check system integrity using the given reference file"
	echo "  - halt/stop             : Poweroff the system"
	echo "  - help/h [option]       : Display this help message. "
	echo "    if [option] given, display more detail about the option"
	echo "  - reboot/reload         : Restart the system"
	echo "  - resize-system-slice [size] : Resize system slices (rare usage)"
	echo "  - rollback              : Revert to previous version"
	exit 0
}

# dual-console
# $1: Serial speed
dual_console () {
	[ $# -eq 0 ] && SERIAL_SPEED="" || SERIAL_SPEED=$1
	# We need to touch /boot/loader.conf.local for peristent changes
	grep -q Dh /boot.config && die "Dual console already configured"
	# Tell loader to use serial and vga console
	# Because there is no /boot.config we need to get the serial speed configured first
	# We will use the serial speed value already configured in /etc/ttys
	# But this value is set to "3wire" for FreeBSD 11, then we need to ask user for a value in this case
	if [ -z ${SERIAL_SPEED} ]; then
		grep -E -q 'ttyu0.*std.*' /etc/ttys && \
		SERIAL_SPEED=$(grep ttyu0 /etc/ttys | cut -d'.' -f 2 | cut -d '"' -f 1)
	fi
	# Check that we get something regarding serial speed
	[ -z "${SERIAL_SPEED}" ] && die "Can't determine serial speed from ttyu0
	on /etc/ttys, add the speed value to your command: 9600, 19200, 38400,
		57600 and 115200"
	[ ${SERIAL_SPEED} -lt 9600 ] && die "Incorrect serial speed value: ${SERIAL_SPEED}"
	[ ${SERIAL_SPEED} -gt 115200 ] && die "Incorrect serial speed value: ${SERIAL_SPEED}"
	# On serial version, syscon devices was disabled, need to re-enable them:
	sed -i "" -e '/^ttyv[0-7]/s/off /on /' /etc/ttys
	mount -uw / || die "Can't mount / in RW mode"
	echo "-S${SERIAL_SPEED} -Dh" > /boot.config
	mount -ur / || die "Error for remounting / in RO mode"
}

# Check system integrity
integrity () {
	[ "${SECOND_OPTION}" = "" ] && die "ERROR: Reference mtree filename missing"
	[ ! -f ${SECOND_OPTION} ] && die "ERROR: File ${SECOND_OPTION} didn't exist."
	FILE_TYPE=$(file ${SECOND_OPTION} | cut -d : -f 2)
	echo "./etc" > /tmp/mtree-exclude
	echo "./var" >> /tmp/mtree-exclude
	echo "./tmp" >> /tmp/mtree-exclude
	echo "./dev" >> /tmp/mtree-exclude
	if echo "${FILE_TYPE}" | grep -qi "ASCII text"; then
		cmd="mtree -f ${SECOND_OPTION} -X /tmp/mtree-exclude -p /"
	elif echo "${FILE_TYPE}" | grep -qi bzip; then
		# Warning, the bzipped file can be any type of file!
		cmd="bzcat ${SECOND_OPTION} | mtree -X /tmp/mtree-exclude -p /"
	elif echo "${FILE_TYPE}" | grep -qi xz; then
		cmd="xz -dc ${SECOND_OPTION} | mtree -X /tmp/mtree-exclude -p /"
	else
		die "Is the given reference mtree file a good mtree file ?"
	fi
	echo "Here is the modified files comparing to the reference mtree file:"
	eval $cmd

}

# ask to save configuration
ask_save () {
	echo "Warning: Unsaved changes detected !"
	config diff || true
	user_confirm "Do you want to save the configuration before to continue or abort ? (y/n/a): "
	config save
}

# Install system to another disk
# $1: Destination disk
install () {

	[ $# -eq 0 ] && die "BUG calling install() without arguments"
	# Remove trailing /dev/ if entered by user
	target_disk=$(basename $1)

	if [ ! -c /dev/${target_disk} ]; then
		die "Do not find ${target_disk}"
	fi

	# Load the NANO_DRIVE (label) variable:
	# nanobsd: ufs/BSDRP
	# poudriere-image: gpt/BSDRP
	. /etc/nanobsd.conf

	label=$(get_label)				# BSDRP
	boot_dev=$(label2dev ${NANO_DRIVE})		# da0

	disks=$(sysctl -n kern.disks)
	[ "${boot_dev}" = "${target_disk}" ] && die "Source disk (${boot_dev}) is same as destination disk (${target_disk}), use another disk in this list: ${disks}"

	# Extract only size of usefull data (so end of unextended partition data)
	sectors=$(gpart show ${boot_dev} | grep '\- free \-' | tr -s ' ' | cut -d ' ' -f 2 | tail -n 1)
	if [ -z "${sectors}" ]; then
		# No -free- part detected:
		# 1. Could be a GPT in CORRUPTED state
		# 2. Or data partition could have been extended on the installation media
		sectors_beg=$(gpart show ${boot_dev} | grep freebsd | tr -s ' ' | cut -d ' ' -f 2 | tail -n 1)
		# 65536 is for the default 32M with poudriere-image
		sectors_end=65536
		sectors=$(( sectors_beg + sectors_end ))
	fi
	bytes=$(( 1 + ${sectors} / 2048 ))
	echo "Copying ${bytes}MB from ${boot_dev} to ${target_disk}..."
	dd if=/dev/${boot_dev} of=/dev/${target_disk} bs=1M count=${bytes} || die "Meet error during install"
	# Fix the message “the primary GPT table is corrupt or invalid.”
	gpart recover /dev/${target_disk}
}

# When installed on bigger usb key or hard-drive
# Destroy the data partition and re-create a big one
expand_data_slice () {

	# Load the NANO_DRIVE (label) variable:
	# nanobsd: ufs/BSDRP
	# poudriere-image: gpt/BSDRP
	. /etc/nanobsd.conf

	lbltype=$(echo ${NANO_DRIVE} | cut -d '/' -f 1)	# ufs or gpt
	label=$(echo ${NANO_DRIVE} | cut -d '/' -f 2)	# BSDRP
	boot_dev=$(label2dev ${NANO_DRIVE})				# ad0

	is_mounted "/data" && die "/data is mounted, you need to unmount it"

	#free space
	free_space=$(gpart show ${boot_dev} | grep "\- free \-" | grep -v "K)" \
			| cut -d '-' -f 3 | tr -s ' ')
	[ -z "${free_space}" ] && die "There is no space left on disk (or CORRUPT gpt table that need to be fixed with gpt recover)"
	echo "There is ${free_space} available on your disk that can be use for /data"
	user_confirm "Are you sure to repartition your disk (it is a long process) ? (y/n)"

	lbldatapart=$(mount2label '/data')		# ufs/BSDRPs4
	partid=$(label2part ${lbldatapart})		# 4 for ufs/BSDRPs4 or 6 for gpt/data

	# gpart resize + growfs is simpler than deleting and recreating partition
	# but growfs is very slow
	gpart resize -i ${partid} ${boot_dev}
	# The label could flap after the resize, need to wait it came back
	sleep 2
	growfs -y ${lbldatapart}
	echo "Done"
}

# Revert to the other system partition
# Just change fstab and gpart bootme????

#Big part of this function came from the upgrade script
#TODO: Need to merge the upgrade script and this script
# 0. Ask a user confirmation
# 1. Check if there is a previous release
# 2. Mount the previous and update the fstab
# 3. Change the active slice and bootloader default choice
rollback () {
	# Load the NANO_DRIVE (label) variable:
	# nanobsd: ufs/BSDRP
	# poudriere-image: gpt/BSDRP
	. /etc/nanobsd.conf

	lbl_type=$(echo ${NANO_DRIVE} | cut -d '/' -f 1)	# ufs or gpt
	label=$(echo ${NANO_DRIVE} | cut -d '/' -f 2)		# BSDRP
	boot_dev=$(label2dev ${NANO_DRIVE})					# /dev/ad0
	lbl_active=$(mount2label '/')			# ufs/BSDRPs2a or gpt/BSDRP2 or ufs/BSDRPs2
	part_active=$(label2part ${lbl_active})	# 1 or 2 for nanobsd 3-4 for poudriere-image

	if (echo "${lbl_active}" | grep -q "1"); then
		lbl_prev=$(echo ${lbl_active} | sed 's/1/2/')
	elif (echo "${lbl_active}" | grep -q "2"); then
		lbl_prev=$(echo ${lbl_active} | sed 's/2/1/')
	else
		die "Can't detect active partition"
	fi
	part_prev=$(label2part ${lbl_prev})

	# Special case: nanobsd ugpraded to poudriere-image
	# then requested a rollback
	if ! [ -c /dev/${lbl_prev} ]; then
		if echo "${lbl_prev}" | grep -q 'ufs/'; then
			if [ -c /dev/${lbl_prev}a ]; then
				lbl_prev=${lbl_prev}a
			fi
		fi
	fi

	# Check if previous filesystem was good
	if [ -c /dev/${lbl_prev} ]; then
		fsck_ffs -n /dev/${lbl_prev} ||
		die "ERROR: Missing or fsck problem on the previous system slice"
	else
			die "ERROR: This system was never upgraded"
	fi

	user_confirm "Warning: Are you sure to revert to the previous release ? (y/n)"

	# Need to compare some files between the old and new partition
	[ -d /tmp/sysupgrade ] || mkdir /tmp/sysupgrade

	#   Adapt fstab to reuse the previous system
	sed -i "" "s|${lbl_active}|${lbl_prev}|g" /etc/fstab

	# Save the config file that include the fstab
	mount /cfg || die "ERROR: Cant't mount /cfg"
	if ! cp /etc/fstab /cfg; then
		umount /cfg
		die "ERROR: Can't save fstab"
	fi
	umount /cfg || die "ERROR: Can't umount /cfg"
	case $(uname -m) in
	i386|amd64)
		if [ "${lbl_type}" = "ufs" ]; then
			# nanobsd
			boot0cfg -s ${part_prev} -t 18 -v ${boot_dev} || \
				die "ERROR: Can't update FreeBSD bootloader"
			gpart set -a active -i ${part_prev} ${boot_dev} || \
				die "ERROR: Can't update active partition"
		else
			# poudriere-image
			gpart set -a bootme -i ${part_prev} ${boot_dev} || \
				die "ERROR: Can't add bootme flag to previous system partition"
			gpart unset -a bootme -i ${part_activeT} ${boot_dev} || \
				die "ERROR: Can't remove bootme flag from active system partition"
		fi
		;;
	arm)
		echo "arm upgrade script not tested!"
		gpart set -a active -i ${part_prev} ${boot_dev} || \
			die "ERROR: Can't update active partition"
		;;
	esac

	# Log
	echo "BSDRP system rollback complete"
	logger BSDRP system rollback complete
}

# Check if cfg was modified
check_cfg () {
	# Testing /etc/rc.conf
	if [ -f /etc/rc.conf ]; then
		sh /etc/rc.conf || die "There is an error in /etc/rc.conf file"
	fi
	echo "Checking if configuration is saved..."
	config diff quiet || ask_save
}

# In case of second partition the active one, need to switch to first partition
# $1: active partition in form ufs/BSDRPs2 or gpt/BSDRP2
swap_system() {
	echo -n "Active partition need to be partition 1, swaping it (Don't stop this fake-upgrade operation!)..."
	cat /dev/$1 | upgrade
	echo "Done, rebooting..."
	reboot
}

# Resize OS partition size
# SECOND_OPTION global var is the size
# $1 is boot_dev in form of ada0
# $2 is the format type (ufs: nanobsd, gpt: poudriere-image)
resize_system() {
	# Need to check if already resized
	local boot_dev=$1
	local lbl_type=$2
	echo -n "Resizing partition..."
	if [ ${lbl_type} = "ufs" ]; then
		# nanobsd
		gpart delete -i 4 ${boot_dev}
		gpart delete -i 3 ${boot_dev}
		gpart delete -i 2 ${boot_dev}
		gpart resize -i 1 -a 4k -s ${SECOND_OPTION} ${boot_dev}
		gpart commit ${boot_dev}
		gpart add -t freebsd -i 2 -a 4k -s ${SECOND_OPTION} ${boot_dev}
		gpart add -t freebsd -i 3 -a 4k -s 16M ${boot_dev}
		gpart add -t freebsd -i 4 -a 4k -l data ${boot_dev}
		newfs -b 4096 -f 512 -i 8192 -U -L ${label}s3 /dev/${boot_dev}s3
		newfs -b 4096 -f 512 -i 8192 -U -L ${label}s4 /dev/${boot_dev}s4
	else
		# poudriere-image
		gpart delete -i 6 ${boot_dev}
		gpart delete -i 5 ${boot_dev}
		gpart delete -i 4 ${boot_dev}
		gpart resize -i 3 -a 4k -s ${SECOND_OPTION} ${boot_dev}
		gpart add -t freebsd-ufs -i 4 -a 4k -s ${SECOND_OPTION} -l BSDRP2 ${boot_dev}
		gpart add -t freebsd-ufs -i 5 -a 4k -s 32M -l cfg ${boot_dev}
		gpart add -t freebsd-ufs -i 6 -a 4k -l data ${boot_dev}
		newfs -b 4096 -f 512 -i 8192 -U -L cfg /dev/gpt/cfg
		newfs -U -L data /dev/gpt/data
	fi
	config save
	echo "Done"
}

# Resize system slice
resize_system_slice () {
	[ -z "${SECOND_OPTION}" ] && die "Missing size (in block)"
	echo "This tool will expand the 2 systems slices to the given size."
	echo "It's only usefull for specific upgrade"
	echo "- If a partition swaping is needed, system will reboot automatically at the end of first step"
	echo "  You need to restart this tool after the reboot for continuing"
	echo "- All files stored in /data partition will be destroyed!"
	user_confirm "Do you want to continue or abort ? (y/a): "

	# Load the NANO_DRIVE (label) variable:
	# nanobsd: ufs/BSDRP
	# poudriere-image: gpt/BSDRP
	. /etc/nanobsd.conf

	local boot_dev=$(label2dev ${NANO_DRIVE})		# da0

	# Need to check total disk space
	echo -n "Checking disk size..."
	local disk_size=$(gpart show ${boot_dev} | grep ${boot_dev} | tr -s ' ' | cut -d ' ' -f 3)
	[ -z "${disk_size}" ] && die "Can't read the disk size"

	# 1 000 000 sector at 512B
	# Check that current disk sector size is enough for twice new system size AND cfg+data slices
	local minimum_size=$((SECOND_OPTION * 2 + 65536 + 655360))
	[ ${disk_size} -lt ${minimum_size} ] && die "Disk too small for system slice expansion (minimum block size of ${minimum_size} but it has ${disk_size}"

	is_mounted "/data" && die "/data is mounted, you need to unmount it"

	local lbl_active=$(mount2label '/')           # ufs/BSDRPs2a or gpt/BSDRP2
	local lbl_type=$(echo ${NANO_DRIVE} | cut -d '/' -f 1)
	if echo ${lbl_active} | grep -q 2; then
		swap_system ${lbl_active}
	else
		resize_system ${boot_dev} ${lbl_type}
	fi

	echo "Your system slice were correctly resized"
	return 0
}

# Reboot
sys_reboot () {
	check_cfg
	echo "Rebooting..."
	# Never use reboot(8) under FreeBSD !
	shutdown -r now
}

# Halt
sys_halt () {
	check_cfg
	echo "Power halting..."
	# Never use halt under FreeBSD !
	shutdown -p now
}

###################
## Main function ##
###################

# Get options passed by user
if [ $# -eq 0 ]; then
	FIRST_OPTION=""
	SECOND_OPTION=""
	THIRD_OPTION=""
	usage
	exit 0
fi

FIRST_OPTION="$1"

if [ $# -ge 2 ]; then
	SECOND_OPTION="$2"
else
	SECOND_OPTION=""
fi
if [ $# -ge 3 ]; then
	THIRD_OPTION="$3"
else
	THIRD_OPTION=""
fi

case "$FIRST_OPTION" in
	dual-console)
		dual_console ${SECOND_OPTION}
		;;
	expand-data-slice)
		expand_data_slice
		;;
	halt|stop)
		sys_halt
		;;
	help|h)
		usage
		;;
	install)
		install ${SECOND_OPTION}
		;;
	integrity)
		integrity
		;;
	reboot|reload)
		sys_reboot
		;;
	resize-system-slice)
		resize_system_slice ${SECOND_OPTION}
		;;
	rollback)
		rollback
		;;
	*)
		usage
		;;
esac
