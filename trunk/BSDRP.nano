# BSD Router Project NanoBSD configuration file
#
# NanoBSD port support added from Gitoyen:
# http://www.gitoyen.net/Howto-NanoBSD-quagga-router 
################## Common section #################

# Name of this NanoBSD build.  (Used to construct workdir names)
NANO_NAME=BSDRP

# Source tree directory
NANO_SRC=/usr/src

# Where nanobsd additional files live under the source tree
NANO_TOOLS=tools/tools/nanobsd/BSDRP

# Where cust_pkg() finds packages to install
NANO_PACKAGE_DIR=${NANO_SRC}/${NANO_TOOLS}/Pkg
NANO_PACKAGE_LIST="*"

# Object tree directory
# default is subdir of /usr/obj
# XXX: MAKEOBJDIRPREFIX handling... ?
# Need to configure this variable because it's used in the pkg_add function
NANO_OBJ=/usr/obj/nanobsd.${NANO_NAME}/
# Question: Why there is the / at the end of NANO_OBJ?
# Because all use of NANO_OBJ in nanobsd.sh add another / after ??

# The directory to put the final images
# default is ${NANO_OBJ}
#NANO_DISKIMGDIR=""

# Parallel Make
NANO_PMAKE="make -j 3"

# Need to set early the NANO_ARCH variable for being use in the add_port function
# TARGET_ARCH was generated by the make script
NANO_ARCH=${TARGET_ARCH}

# Options to put in make.conf during buildworld only
CONF_BUILD=''

# Options to put in make.conf during installworld only
# Do not use: WITHOUT_TOOLCHAIN=YES, because installing port need it
CONF_INSTALL=''

# Options to put in make.conf during both build- & installworld.
# See the file /usr/src/tools/build/options for details
# WITHOUT_INFO= incompatible for installing a dependency of Quagga
#CONF_WORLD=''
CONF_WORLD='
WITHOUT_ACCT=
WITHOUT_APM=
WITHOUT_ASSERT_DEBUG=
WITHOUT_ATM=
WITHOUT_AUDIT=
WITHOUT_AUTHPF=
WITHOUT_BIND=
WITHOUT_BIND_DNSSEC=
WITHOUT_BIND_ETC=
WITHOUT_BIND_LIBS_LWRES=
WITHOUT_BIND_MTREE=
WITHOUT_BIND_NAMED=
WITHOUT_BIND_UTILS=
WITHOUT_BLUETOOTH=
WITHOUT_CALENDAR=
WITHOUT_CTM=
WITHOUT_CVS=
WITHOUT_DICT=
WITHOUT_EXAMPLES=
WITHOUT_FLOPPY=
WITHOUT_FREEBSD_UPDATE=
WITHOUT_GAMES=
WITHOUT_GCOV=
WITHOUT_GDB=
WITHOUT_GPIB=
WITHOUT_GROFF=
WITHOUT_HTML=
WITHOUT_IPFILTER=
WITHOUT_IPFW=
WITHOUT_IPX=
WITHOUT_IPX_SUPPORT=
WITHOUT_JAIL=
WITHOUT_KERBEROS=
WITHOUT_KERBEROS_SUPPORT=
WITHOUT_LEGACY_CONSOLE=
WITHOUT_LIB32=
WITHOUT_LOCALES=
WITHOUT_LOCATE=
WITHOUT_LPR=
WITHOUT_MAIL=
WITHOUT_MAILWRAPPER=
WITHOUT_MAN=
WITHOUT_NCP=
WITHOUT_NDIS=
WITHOUT_NETCAT=
WITHOUT_NIS=
WITHOUT_NLS=
WITHOUT_NLS_CATALOGS=
WITHOUT_NS_CACHING=
WITHOUT_PORTSNAP=
WITHOUT_QUOTAS=
WITHOUT_RCMDS=
WITHOUT_RCS=
WITHOUT_RESCUE=
WITHOUT_ROUTED=
WITHOUT_SENDMAIL=
WITHOUT_SHAREDOCS=
WITHOUT_SSP=
WITHOUT_SYSCONS=
WITHOUT_SYSINSTALL=
WITHOUT_TELNET=
WITHOUT_WIRELESS=
WITHOUT_WIRELESS_SUPPORT=
WITHOUT_WPA_SUPPLICANT_EAPOL=
WITHOUT_ZFS=
'

# Customize commands.
NANO_CUSTOMIZE=""

# Late customize commands.
NANO_LATE_CUSTOMIZE=""

# Newfs paramters to use
NANO_NEWFS="-b 4096 -f 512 -i 8192 -O1 -m 0"

# Target media size in 512 bytes sectors
NANO_MEDIASIZE=1200000

# Number of code images on media (1 or 2)
NANO_IMAGES=2

# 0 -> Leave second image all zeroes so it compresses better.
# 1 -> Initialize second image with a copy of the first
NANO_INIT_IMG2=0

# Size of code file system in 512 bytes sectors
# If zero, size will be as large as possible.
NANO_CODESIZE=0

# Size of configuration file system in 512 bytes sectors
# Cannot be zero.
NANO_CONFSIZE=2048

# Size of data file system in 512 bytes sectors
# If zero: no partition configured.
# If negative: max size possible
# This filesystem is used for archive configuration and
# for user customized scripts or tool
NANO_DATASIZE=2048

# Size of the /etc ramdisk in 512 bytes sectors
NANO_RAM_ETCSIZE=10240

# Size of the /tmp+/var ramdisk in 512 bytes sectors
NANO_RAM_TMPVARSIZE=10240

# Media geometry, only relevant if bios doesn't understand LBA.
NANO_SECTS=63
NANO_HEADS=16

# Boot0cfg configuration mode
NANO_BOOT0CFG="-o packet -s 1 -m 3"

# Backing type of md(4) device
# Can be "file" or "swap"
NANO_MD_BACKING="file"

# Label name
# Alphacharacter only
NANO_GLABEL_SYS="BSDRP"
NANO_GLABEL_CFG="cfg"
NANO_GLABEL_DATA="data"

# Progress Print level
PPLEVEL=3

# Need to check if this function works with cross-compiling architecture!!!!
# Recursive complex fonction: Generate one function for each ports
add_port () {
        port=`echo $1 | sed -e 's/\//_/'`
		# Check if package allready exist
		# Need to:
		# 1. check ARCH of this package!
		# 2. Add a trap
		cd /usr/ports/$1
		PKG_NAME=`make package-name` 
		if [ -f ${NANO_OBJ}/ports/packages/All/${PKG_NAME}.tbz ]; then
		# Pkg file found: Generate add_pkg_NAME function
			eval "
				add_pkg_${port} () {
					mkdir -p \${NANO_WORLDDIR}/usr/ports/packages
					mkdir -p \${NANO_WORLDDIR}/usr/ports/distfiles
					mount -t unionfs -o noatime \${NANO_OBJ}/ports/packages \
						\${NANO_WORLDDIR}/usr/ports/packages
					mount -t unionfs -o noatime \${NANO_OBJ}/ports/distfiles \
                        \${NANO_WORLDDIR}/usr/ports/distfiles
					chroot \${NANO_WORLDDIR} /bin/sh -exc \
                		'env PKG_PATH=/usr/ports/packages/All pkg_add ${PKG_NAME}.tbz'
					umount \${NANO_WORLDDIR}/usr/ports/packages
					umount \${NANO_WORLDDIR}/usr/ports/distfiles
					rmdir \${NANO_WORLDDIR}/usr/ports
				}
        		customize_cmd add_pkg_${port}
        	"
		else
		# No pkg file: Generate add_port_NAME function
        	eval "
        		add_port_${port} () {
					# Build the package and install the ports
					if [ ! -d \${NANO_OBJ}/ports/packages ]; then
						mkdir -p \${NANO_OBJ}/ports/packages
					fi	
					if [ ! -d \${NANO_OBJ}/ports/distfiles ]; then
                        mkdir -p \${NANO_OBJ}/ports/distfiles
                    fi

               		mkdir -p \${NANO_WORLDDIR}/usr/ports/packages
					mkdir -p \${NANO_WORLDDIR}/usr/ports/distfiles
               		mount -t unionfs -o noatime /usr/src \
                       \${NANO_WORLDDIR}/usr/src
               		mount -t unionfs -o noatime /usr/ports \
                       \${NANO_WORLDDIR}/usr/ports
					mount -t unionfs -o noatime \${NANO_OBJ}/ports/packages \
						\${NANO_WORLDDIR}/usr/ports/packages
					mount -t unionfs -o noatime \${NANO_OBJ}/ports/distfiles \
                        \${NANO_WORLDDIR}/usr/ports/distfiles
               		mkdir -p \${NANO_WORLDDIR}/dev
               		mount -t devfs devfs \${NANO_WORLDDIR}/dev
               		mkdir -p \${NANO_WORLDDIR}/usr/pobj
               		mkdir -p \${NANO_WORLDDIR}/usr/workdir
               		cp /etc/resolv.conf \${NANO_WORLDDIR}/etc/resolv.conf
               		chroot \${NANO_WORLDDIR} /bin/sh -exc \
                        'env TARGET=${NANO_ARCH} TARGET_ARCH=${NANO_ARCH} make WRKDIRPREFIX=/usr/workdir -C /usr/ports/$1 \
                        package-recursive BATCH=yes $2'
               		rm \${NANO_WORLDDIR}/etc/resolv.conf
               		rm -rf \${NANO_WORLDDIR}/usr/obj
               		rm -rf \${NANO_WORLDDIR}/usr/pobj
               		rm -rf \${NANO_WORLDDIR}/usr/workdir
               		umount \${NANO_WORLDDIR}/dev
					umount \${NANO_WORLDDIR}/usr/ports/packages
					umount \${NANO_WORLDDIR}/usr/ports/distfiles
               		umount \${NANO_WORLDDIR}/usr/ports
               		umount \${NANO_WORLDDIR}/usr/src
					rmdir \${NANO_WORLDDIR}/usr/ports/packages
					rmdir \${NANO_WORLDDIR}/usr/ports/distfiles
               		rmdir \${NANO_WORLDDIR}/usr/ports
        		}
        		customize_cmd add_port_${port}
        	"
		fi
}

# Add libdlmalloc lib: Make BGP in Quagga more faster
add_port "devel/libdlmalloc"

# Quagga and net-snmp need perl for building
add_port "lang/perl5.8" "-DWITHOUT_PERL_MALLOC -DWITH_PERL_64BITINT -DNO_INSTALL_MANPAGES"

# Then we need to install net-snmp without perl modules
add_port "net-mgmt/net-snmp" "-DNOPORTDOCS -DNO_INSTALL_MANPAGES -DWITH_IPV6 -DWITH_MFD_REWRITES -DWITHOUT_TKMIB -DWITH_DUMMY -DWITHOUT_PERL_EMBEDDED -DWITHOUT_PERL"

# Quagga installation
add_port "net/quagga" "-DNO_INSTALL_MANPAGES -DWITH_ISISD -DWITH_OSPF_NSSA -DWITH_OSPF_OPAQUE_LSA -DWITH_SNMP -DWITH_TCPSOCKETS -DWITH_DLMALLOC -DWITH_VTYSH"
# Quagga install some software that we don't need anymore after install: devel/libtool15, devel/gettext, /devel/gmake, /lang/gawk

# Add a text editor that support colorization (usefull for edit shell script)
add_port "editors/vim-lite" "-DWITHOUT_X11 -DNO_INSTALL_MANPAGES"

# Add XORP
#add_port "net/xorp" "-DWITH_ADVMCAST -DWITH_IPV6 -DWITH_SNMP -DWITH_OPTIMIZATION -DWITHOUT_CHECK -DWITHOUT_DEBUGGING -DWITHOUT_PROFILING"
# Xorp wants to start snmpd.... disable it:
add_port "net/xorp" "-DNO_INSTALL_MANPAGES -DWITH_ADVMCAST -DWITH_IPV6 -DWITH_OPTIMIZATION -DWITHOUT_CHECK -DWITHOUT_DEBUGGING -DWITHOUT_PROFILING"

cleanup_ports () {
        chroot ${NANO_WORLDDIR} /bin/sh -exc \
        'pkg_delete gmake* libtool* gawk* perl* '
}

customize_cmd cleanup_ports

# BSDRP custom function
bsdrp_custom () {
	# Copy BSDRP information files
	cp -v ${NANO_TOOLS}/AUTHORS ${NANO_WORLDDIR}/root/
	cp -v ${NANO_TOOLS}/LICENSE ${NANO_WORLDDIR}/root/
	# Set Quagga permission
	chroot ${NANO_WORLDDIR} /bin/sh -exc \
	'chown -R quagga:quagga /usr/local/etc/quagga'
	# Compress the kernel (save 3Mb)
	if [ -f ${NANO_WORLDDIR}/boot/kernel/kernel ]
	then
		gzip -v9 ${NANO_WORLDDIR}/boot/kernel/kernel
	fi
	# Remove info and man pages
	if [ -d ${NANO_WORLDDIR}/usr/local/info ]
	then
		rm -f ${NANO_WORLDDIR}/usr/local/info/*.*
	fi
	if [ -d ${NANO_WORLDDIR}/usr/local/man ]
	then
		rm -f ${NANO_WORLDDIR}/usr/local/man/man1/*.gz
		rm -f ${NANO_WORLDDIR}/usr/local/man/man3/*.gz
	fi
	# Remove doc folder
	DOCS_TO_REMOVE='
doc/gettext
doc/libasprintf
doc/libiconv
doc/snmp
examples/quagga
'
	for c in $DOCS_TO_REMOVE
	do	
		if [ -d ${NANO_WORLDDIR}/usr/local/share/$c ]
		then
			rm -rf ${NANO_WORLDDIR}/usr/local/share/$c
		fi
	done

	# Remove info files (save 2 Mb)
	if [ -d ${NANO_WORLDDIR}/usr/share/info ]
	then
		rm -f ${NANO_WORLDDIR}/usr/share/info/*.gz
	fi

	# About removing all gcc suite
	# How to found the list of all binary files members of gcc suite ?
	# This do not prevent to rebuild a BSDRP image easly because there is 
	# an installworld that is done before to (re)build ports
}

# Enable only serial system only
# Usefull ????
bsdrp_console_serial () {
# Enable getty on console
    sed -i "" -e /tty[du]0/s/off/on/ ${NANO_WORLDDIR}/etc/ttys
	sed -i "" -e /tty[du]0/s/dialup/vt100/ ${NANO_WORLDDIR}/etc/ttys

    # Disable getty on syscons devices
    sed -i "" -e '/^ttyv[0-8]/s/    on/     off/' ${NANO_WORLDDIR}/etc/ttys

    # Tell loader to use serial console early.
    echo " -h" > ${NANO_WORLDDIR}/boot.config

	# Customize loader.conf file:
	echo 'boot_serial="YES"' >> ${NANO_WORLDDIR}/boot/loader.conf
	echo 'comconsole_speed="9600"' >> ${NANO_WORLDDIR}/boot/loader.conf
	echo 'console="comconsole"' >> ${NANO_WORLDDIR}/boot/loader.conf

}

# Enable use of keyboard/vga and serial
#
###### Warning ####
# Don't boot if no serial port available
#
bsdrp_console_dual () {
    sed -i "" -e /tty[du]0/s/off/on/ ${NANO_WORLDDIR}/etc/ttys
	sed -i "" -e /tty[du]0/s/dialup/vt100/ ${NANO_WORLDDIR}/etc/ttys

    # Tell loader to use serial and vga console.
    echo " -D" > ${NANO_WORLDDIR}/boot.config

	# Customize loader.conf file:
	echo 'boot_multicons="YES"' >> ${NANO_WORLDDIR}/boot/loader.conf
	echo 'boot_serial="YES"' >> ${NANO_WORLDDIR}/boot/loader.conf
	echo 'comconsole_speed="9600"' >> ${NANO_WORLDDIR}/boot/loader.conf
	echo 'console="comconsole,vidconsole"' >> ${NANO_WORLDDIR}/boot/loader.conf

}

# Standard vga console, with serial port configured as vt100 console
bsdrp_console_vga () {
	sed -i "" -e /tty[du]0/s/off/on/ ${NANO_WORLDDIR}/etc/ttys
	sed -i "" -e /tty[du]0/s/dialup/vt100/ ${NANO_WORLDDIR}/etc/ttys
}

# Set physical disk layout for generic USB of 1Gb
UsbDevice Generic 500

# Install Custom scripts and config files
customize_cmd cust_install_files

# Need to execute the bsdrp_custom after the cust_install_files
customize_cmd bsdrp_custom

# Allow root login via ssh
customize_cmd cust_allow_ssh_root
