# BSD Router Project NanoBSD configuration file
# http://bsdrp.net
#
# NanoBSD port support added from Gitoyen:
# http://www.gitoyen.net/Howto-NanoBSD-quagga-router 
# Some cleanup idea taken from imp@ nanoBSD script
#
################## Common section #################

# Name of this NanoBSD build.  (Used to construct workdir names)
NANO_NAME=BSDRP

# Source tree directory
NANO_SRC=/usr/src

# Where nanobsd additional files live under the source tree
NANO_TOOLS=tools/tools/nanobsd/BSDRP

# Where cust_pkg() finds packages to install
NANO_PACKAGE_DIR=${NANO_SRC}/${NANO_TOOLS}/Pkg
NANO_PACKAGE_LIST="*"

# Object tree directory
# default is subdir of /usr/obj
# XXX: MAKEOBJDIRPREFIX handling... ?
# Need to configure this variable because it's used in the pkg_add function
NANO_OBJ=/usr/obj/nanobsd.${NANO_NAME}.${TARGET_ARCH}

# The directory to put the final images
# default is ${NANO_OBJ}
#NANO_DISKIMGDIR=""

# Need to set early the NANO_ARCH variable for being use in the add_port function
# TARGET_ARCH was set by the make script
NANO_ARCH=${TARGET_ARCH}

# Options to put in make.conf during buildworld only
CONF_BUILD=''

# Options to put in make.conf during installworld only
# Do not use: WITHOUT_TOOLCHAIN=, because installing port need it
# Do not use: WITHOUT_INSTALLLIB=, because perl can't compile
CONF_INSTALL=''

# Options to put in make.conf during both build- & installworld.
# See the file /usr/src/tools/build/options or man src.conf for details
# WITHOUT_INFO= incompatible for installing a dependency of Quagga
# WITHOUT_FORTH= incompatible with boot flags (need to be confirmed).
# WITHOUT_GROFF= incompatible with isc-dhcp-server (needed for build unused man page)
# WITHOUT_KVM= and WITHOUT_KVM_SUPPORT= prevent buildworld to complet (don't know why)

CONF_WORLD='
WITHOUT_ACCT=
WITHOUT_APM=
WITHOUT_ASSERT_DEBUG=
WITHOUT_ATM=
WITHOUT_AUDIT=
WITHOUT_AUTHPF=
WITHOUT_BIND=
WITHOUT_BIND_DNSSEC=
WITHOUT_BIND_ETC=
WITHOUT_BIND_LIBS_LWRES=
WITHOUT_BIND_MTREE=
WITHOUT_BIND_NAMED=
WITHOUT_BIND_UTILS=
WITHOUT_BLUETOOTH=
WITHOUT_BSNMP=
WITHOUT_CALENDAR=
WITHOUT_CTM=
WITHOUT_CVS=
WITHOUT_DICT=
WITHOUT_EXAMPLES=
WITHOUT_FLOPPY=
WITHOUT_FREEBSD_UPDATE=
WITHOUT_GAMES=
WITHOUT_GCOV=
WITHOUT_GDB=
WITHOUT_GPIB=
WITHOUT_HTML=
WITHOUT_IPFILTER=
WITHOUT_IPFW=
WITHOUT_IPX=
WITHOUT_IPX_SUPPORT=
WITHOUT_JAIL=
WITHOUT_KERBEROS=
WITHOUT_KERBEROS_SUPPORT=
WITHOUT_LEGACY_CONSOLE=
WITHOUT_LIB32=
WITHOUT_LOCALES=
WITHOUT_LOCATE=
WITHOUT_LPR=
WITHOUT_MAN=
WITHOUT_MAN_UTILS=
WITHOUT_NCP=
WITHOUT_NDIS=
WITHOUT_NETCAT=
WITHOUT_NIS=
WITHOUT_NLS=
WITHOUT_NLS_CATALOGS=
WITHOUT_NS_CACHING=
WITHOUT_PORTSNAP=
WITHOUT_QUOTAS=
WITHOUT_RCMDS=
WITHOUT_RESCUE=
WITHOUT_ROUTED=
WITHOUT_SENDMAIL=
WITHOUT_SHAREDOCS=
WITHOUT_SSP=
WITHOUT_SYSCONS=
WITHOUT_SYSINSTALL=
WITHOUT_TELNET=
WITHOUT_WIRELESS=
WITHOUT_WIRELESS_SUPPORT=
WITHOUT_WPA_SUPPLICANT_EAPOL=
WITHOUT_ZFS=
WITH_IDEA=
'

# Customize commands.
NANO_CUSTOMIZE=""

# Late customize commands.
NANO_LATE_CUSTOMIZE=""

# Newfs paramters to use
NANO_NEWFS="-b 4096 -f 512 -i 8192 -O1 -m 0"

# Set physical disk layout for generic USB of 256Mb
# This function will set the variable NANO_MEDIASIZE, NANO_SECTS, NANO_HEADS
UsbDevice Generic 256

# Number of code images on media (1 or 2)
NANO_IMAGES=2

# 0 -> Leave second image all zeroes so it compresses better.
# 1 -> Initialize second image with a copy of the first
NANO_INIT_IMG2=0

# Size of code file system in 512 bytes sectors
# If zero, size will be as large as possible.
NANO_CODESIZE=0

# Size of configuration file system in 512 bytes sectors
# Cannot be zero.
# 10MB = 2048
NANO_CONFSIZE=20480

# Size of data file system in 512 bytes sectors
# If zero: no partition configured.
# If negative: max size possible
# This filesystem is used for archive configuration and
# for user customized scripts or tool
NANO_DATASIZE=20480

# Size of the /etc ramdisk in 512 bytes sectors
# 10240=5Mb
NANO_RAM_ETCSIZE=10240

# Size of the /tmp+/var ramdisk in 512 bytes sectors
# 20480=10Mb (usefull for log files)
NANO_RAM_TMPVARSIZE=20480

# Boot0cfg configuration mode
NANO_BOOT0CFG="-o packet -s 1 -m 3"

# Backing type of md(4) device
# Can be "file" or "swap"
NANO_MD_BACKING="file"

# Label name
# Alphacharacter only
NANO_GLABEL_SYS="BSDRP"
NANO_GLABEL_CFG="cfg"
NANO_GLABEL_DATA="data"

# Progress Print level
PPLEVEL=3

# Need to check if this function works with cross-compiling architecture!!!!
# Recursive complex fonction: Generate one function for each ports
add_port () {
        port=`echo $1 | sed -e 's/\//_/'`
		# Check if package allready exist
		# Need to:
		# 1. check ARCH of this package!
		# 2. Add a trap
		cd /usr/ports/$1
		PKG_NAME=`make package-name` 
		if [ -f ${NANO_OBJ}/ports/packages/All/${PKG_NAME}.tbz ]; then
		# Pkg file found: Generate add_pkg_NAME function
			eval "
				add_pkg_${port} () {
					#Need to create ${NANO_OBJ}/ports in this add_pkg_${port} function
					if [ ! -d \${NANO_OBJ}/ports ]; then
						mkdir -p \${NANO_OBJ}/ports/distfiles
						mkdir -p \${NANO_OBJ}/ports/packages
					fi
					mkdir -p \${NANO_WORLDDIR}/usr/ports/packages
					mkdir -p \${NANO_WORLDDIR}/usr/ports/distfiles
					mount -t unionfs -o noatime \${NANO_OBJ}/ports/packages \
						\${NANO_WORLDDIR}/usr/ports/packages
					mount -t unionfs -o noatime \${NANO_OBJ}/ports/distfiles \
                        \${NANO_WORLDDIR}/usr/ports/distfiles
					chroot \${NANO_WORLDDIR} /bin/sh -exc \
                		'cd /usr/ports/packages/All;pkg_add -F ${PKG_NAME}.tbz'
					umount \${NANO_WORLDDIR}/usr/ports/packages
					umount \${NANO_WORLDDIR}/usr/ports/distfiles
					rmdir \${NANO_WORLDDIR}/usr/ports/packages
					rmdir \${NANO_WORLDDIR}/usr/ports/distfiles
					rmdir \${NANO_WORLDDIR}/usr/ports
				}
        		customize_cmd add_pkg_${port}
        	"
		else
		# No pkg file: Generate add_port_NAME function
        	eval "
        		add_port_${port} () {
					#Need to create ${NANO_OBJ}/ports in this add_port_${port} function
					if [ ! -d \${NANO_OBJ}/ports ]; then
						mkdir -p \${NANO_OBJ}/ports/distfiles
						mkdir -p \${NANO_OBJ}/ports/packages
					fi
               		mkdir -p \${NANO_WORLDDIR}/usr/ports/packages
					mkdir -p \${NANO_WORLDDIR}/usr/ports/distfiles
               		mount -t unionfs -o noatime \${NANO_SRC} \
                       \${NANO_WORLDDIR}/usr/src
               		mount -t unionfs -o noatime /usr/ports \
                       \${NANO_WORLDDIR}/usr/ports
					mount -t unionfs -o noatime \${NANO_OBJ}/ports/packages \
						\${NANO_WORLDDIR}/usr/ports/packages
					mount -t unionfs -o noatime \${NANO_OBJ}/ports/distfiles \
                        \${NANO_WORLDDIR}/usr/ports/distfiles
               		mkdir -p \${NANO_WORLDDIR}/dev
               		mount -t devfs devfs \${NANO_WORLDDIR}/dev
               		mkdir -p \${NANO_WORLDDIR}/usr/pobj
               		mkdir -p \${NANO_WORLDDIR}/usr/workdir
               		cp /etc/resolv.conf \${NANO_WORLDDIR}/etc/resolv.conf
					# Improvement: Don't know why package-recursive don't works here
               		chroot \${NANO_WORLDDIR} /bin/sh -exc \
                        'env TARGET=${NANO_ARCH} TARGET_ARCH=${NANO_ARCH} MACHINE=${NANO_ARCH} UNAME_p=${NANO_ARCH} UNAME_m=${NANO_ARCH} make WRKDIRPREFIX=/usr/workdir -C /usr/ports/$1 \
                        package BATCH=yes -DWITHOUT_X11 $2 clean'
               		rm \${NANO_WORLDDIR}/etc/resolv.conf
               		rm -rf \${NANO_WORLDDIR}/usr/obj
               		rm -rf \${NANO_WORLDDIR}/usr/pobj
               		rm -rf \${NANO_WORLDDIR}/usr/workdir
               		umount \${NANO_WORLDDIR}/dev
					umount \${NANO_WORLDDIR}/usr/ports/packages
					umount \${NANO_WORLDDIR}/usr/ports/distfiles
               		umount \${NANO_WORLDDIR}/usr/ports
               		umount \${NANO_WORLDDIR}/usr/src
					rmdir \${NANO_WORLDDIR}/usr/ports/packages
					rmdir \${NANO_WORLDDIR}/usr/ports/distfiles
               		rmdir \${NANO_WORLDDIR}/usr/ports
        		}
        		customize_cmd add_port_${port}
        	"
		fi
}

#### Add routing related ports #####
# Add libdlmalloc lib: Make BGP in Quagga more faster
add_port "devel/libdlmalloc" "-DNOPORTDOCS -DNO_INSTALL_MANPAGES"

# Quagga and net-snmp need perl for building
add_port "lang/perl5.8" "-DWITHOUT_PERL_MALLOC -DWITH_PERL_64BITINT -DNO_INSTALL_MANPAGES -DNOPORTDOCS"

# Then we need to install net-snmp without perl modules
add_port "net-mgmt/net-snmp" "-DNOPORTDOCS -DNO_INSTALL_MANPAGES -DWITH_IPV6 -DWITH_MFD_REWRITES -DWITHOUT_TKMIB -DWITH_DUMMY -DWITHOUT_PERL_EMBEDDED -DWITHOUT_PERL"

# Quagga installation
add_port "net/quagga" "-DNO_INSTALL_MANPAGES -DNOPORTDOCS -DWITH_ISISD -DWITH_OSPF_NSSA -DWITH_OSPF_OPAQUE_LSA -DWITH_SNMP -DWITH_TCPSOCKETS -DWITH_DLMALLOC -DWITH_VTYSH"
# Quagga install some software that we don't need anymore after install: devel/libtool*, devel/gettext, /devel/gmake, /lang/gawk

# Nod enabled:
#add_port "net/openbgpd"
#add_port "devel/libevent"
#add_port "net/openospfd"


### Extra stuf ###
# Libiconv is needed by vim-lite, but the package is not automaticaly generated, then force it:
#add_port "converters/libiconv" "-DNO_INSTALL_MANPAGES -DFORCE_PKG_REGISTER -DNOPORTDOCS"
# text editor that support syntax colorization (usefull for edit shell script)
#add_port "editors/vim-lite" "-DWITHOUT_X11 -DNO_INSTALL_MANPAGES -DNOPORTDOCS"

# Disable XORP
#add_port "net/xorp" "-DWITH_ADVMCAST -DWITH_IPV6 -DWITH_SNMP -DWITH_OPTIMIZATION -DWITHOUT_CHECK -DWITHOUT_DEBUGGING -DWITHOUT_PROFILING"
# Xorp wants stupidly start snmpd for testing it before to compile!!!!.... disable it:
#add_port "net/xorp" "-DNO_INSTALL_MANPAGES -DNOPORTDOCS -DWITH_ADVMCAST -DWITH_IPV6 -DWITH_OPTIMIZATION -DWITHOUT_CHECK -DWITHOUT_DEBUGGING -DWITHOUT_PROFILING"

# Add Bird: Replace XORP that is too memory/CPU hungry:
add_port "net/bird" "-DNO_INSTALL_MANPAGES -DNOPORTDOCS"
add_port "net/bird6" "-DNO_INSTALL_MANPAGES -DNOPORTDOCS"

# Add FreeVRRPd: using XORP only for VRRP is too memory/CPU hungry:
add_port "net/freevrrpd" "-DNO_INSTALL_MANPAGES -DNOPORTDOCS"

# Add ucarp (Userland carp): Enabling carp in the kernel prevent to use FreeVRRPd
add_port "net/ucarp" "-DNO_INSTALL_MANPAGES -DNOPORTDOCS"

# Add IPv6 multicast routing daemons and tools
add_port "net/mcast-tools" "-DNO_INSTALL_MANPAGES -DNOPORTDOCS"

# Add IPv4 DVMRP (multicast) routing daemon
add_port "net/mrouted" "-DNO_INSTALL_MANPAGES -DNOPORTDOCS"

# Add fprobe: Netflow probe
add_port "net-mgmt/fprobe" "-DNO_INSTALL_MANPAGES -DNOPORTDOCS"

# Add OpenLLDP: Link-Layer Discovery protocols
add_port "net-mgmt/openlldp" "-DNO_INSTALL_MANPAGES -DNOPORTDOCS"

# Add DHCP server and client
add_port "net/isc-dhcp31-server" "-DWITHOUT_DHCP_PARANOIA -DWITHOUT_DHCP_JAIL -DNO_INSTALL_MANPAGES -DNOPORTDOCS"
add_port "net/isc-dhcp31-relay" "-DNO_INSTALL_MANPAGES -DNOPORTDOCS"

# Add sstmp, a simple MTA to get mail off the system
# Can't compile with TARGET_ARCH variable set, error message:
# Bug triggered: ports/147853
add_port "mail/ssmtp" "-DNO_INSTALL_MANPAGES -DNOPORTDOCS"

cleanup_ports () {
		# The build tools are installed only if ports are compiled, then don't exist otherwize.
		# Need to prevent auto exist of this script
		set +e
        chroot ${NANO_WORLDDIR} /bin/sh -exc \
        'pkg_delete auto* m4* gmake* libtool* gawk* perl* gettext* bison* help2man* libiconv* p5-gettext*'
		set -e
}

customize_cmd cleanup_ports

# BSDRP custom function
bsdrp_custom () {
	# Copy BSDRP information files
	cp -v ${NANO_TOOLS}/AUTHORS ${NANO_WORLDDIR}/root/
	cp -v ${NANO_TOOLS}/LICENSE ${NANO_WORLDDIR}/root/
	# Disable reverse DNS in sshd:
	echo "UseDNS no" >> ${NANO_WORLDDIR}/etc/ssh/sshd_config
	# Update login.conf db
	chroot ${NANO_WORLDDIR} /bin/sh -exc \
	'cap_mkdb /etc/login.conf'
	# Set Quagga permission
	chroot ${NANO_WORLDDIR} /bin/sh -exc \
	'chown -R quagga:quagga /usr/local/etc/quagga'
	# Put root in xorp group
	#chroot ${NANO_WORLDDIR} /bin/sh -exc \
    #'pw groupmod xorp -M root'
	# Put the xorp config file in xorp group
	#chroot ${NANO_WORLDDIR} /bin/sh -exc \
    #'chown root:xorp /usr/local/etc/xorp.conf'
	#chroot ${NANO_WORLDDIR} /bin/sh -exc \
    #'chmod g+w /usr/local/etc/xorp.conf'

	# Compress the kernel (save 3Mb)
	if [ -f ${NANO_WORLDDIR}/boot/kernel/kernel ]; then
		if ! gzip -v9 ${NANO_WORLDDIR}/boot/kernel/kernel; then
			echo "Error during zipping the kernel"
		fi
	fi
	# Remove some of the folders (without share/snmp)
	FOLDERS_TO_REMOVE='
usr/local/include
usr/local/man
usr/local/info
usr/local/share/doc/gettext
usr/local/share/doc/libasprintf
usr/local/share/doc/libiconv
usr/local/share/doc/snmp
usr/local/share/examples/quagga
usr/share/groff_font
usr/share/tmac
usr/share/me
usr/share/info
usr/share/man
usr/libdata/lint
usr/libdata/ldscripts
'
	for c in $FOLDERS_TO_REMOVE
	do	
		if [ -d ${NANO_WORLDDIR}/$c ]
		then
			echo "Removing ${NANO_WORLDDIR}/$c"
			if ! rm -rf ${NANO_WORLDDIR}/$c ; then
				echo "Error: Can't remove it!"
			fi
		fi
	done

	# Remove some files
    FILES_TO_REMOVE='
usr/local/etc/rc.d/freevrrpd.sh.sample
usr/share/misc/magic.mgc
usr/share/misc/termcap.db
'
    for c in $FILES_TO_REMOVE
    do
        if [ -f ${NANO_WORLDDIR}/$c ]
        then
			echo "Removing ${NANO_WORLDDIR}/$c"
            if ! rm -rf ${NANO_WORLDDIR}/$c ; then
				echo "Error: Can't remove it!"
			fi
        fi
    done

	# All ports are compiled, then we can remove all TOOLCHAIN files
	# This save about 25MB.
	# The list of these files was generated by a tips from imp@:
	# make installworld WITH_TOOLCHAIN=YES DESTDIR=/tmp/with
	# make installworld WITHOUT_TOOLCHAIN=YES DESTDIR=/tmp/without
	# (cd /tmp/with; find . > /tmp/with.list)
	# (cd /tmp/without; find . > /tmp/without.list)
	# diff -u /tmp/with.list /tmp/without.list
	# the tools/knob.sh script generate a list for all files not installed using knobs
	# Result are here: http://bsdrp.net/buildoptions
	# There are more details here, but don't know if there are up-to-date: http://phk.freebsd.dk/misc/build_options/

TOOLCHAIN_TO_REMOVE='
usr/bin/addr2line
usr/bin/gnu-ar
usr/bin/as
usr/bin/ld
usr/bin/nm
usr/bin/objcopy
usr/bin/objdump
usr/bin/gnu-ranlib
usr/bin/readelf
usr/bin/size
usr/bin/strings
usr/bin/strip
usr/bin/cc
usr/bin/gcc
usr/bin/cpp
usr/bin/c++
usr/bin/g++
usr/bin/CC
usr/bin/c++filt
usr/bin/gcov
usr/bin/gdb
usr/bin/gdbtui
usr/bin/kgdb
usr/bin/ar
usr/bin/ranlib
usr/bin/c89
usr/bin/c99
usr/bin/sum
usr/bin/compile_et
usr/bin/ctags
usr/bin/file2c
usr/bin/gprof
usr/bin/od
usr/bin/indent
usr/bin/m4
usr/bin/lex
usr/bin/lex++
usr/bin/flex
usr/bin/flex++
usr/bin/mt
usr/bin/mkstr
usr/bin/rpcgen
usr/bin/unifdef
usr/bin/unifdefall
usr/bin/nvi
usr/bin/vgrind
usr/bin/lint
usr/bin/xstr
usr/bin/lzdec
usr/bin/yacc
usr/bin/yyfix
usr/bin/byacc
usr/bin/lzdec
usr/bin/crunchgen
usr/bin/crunchide
usr/libexec/cc1
usr/libexec/cc1plus
usr/libexec/cc1obj
usr/libexec/vfontedpr
usr/libexec/lint1
usr/libexec/lint2
usr/sbin/btxld
usr/sbin/config
usr/sbin/i2c
usr/sbin/ndp
usr/sbin/rmt
usr/share/misc/gprof.flat
usr/share/misc/gprof.callg
usr/share/misc/vgrindefs
usr/share/misc/vgrindefs.db
usr/share/tmac/tmac.vgrind
'
    for c in $TOOLCHAIN_TO_REMOVE
    do
        if [ -f ${NANO_WORLDDIR}/$c ]
        then
            echo "Removing ${NANO_WORLDDIR}/$c"
            if ! rm -rf ${NANO_WORLDDIR}/$c ; then
                echo "Error: Can't remove it!"
            fi
        fi
    done
	
	# Move termcap.small file
	mv ${NANO_WORLDDIR}/etc/termcap.small ${NANO_WORLDDIR}/usr/share/misc/termcap.db

	# Kill all .a's that are installed with TOOLCHAIN (remove 33MB)
    find ${NANO_WORLDDIR} -name \*.a | xargs rm
}

# Enable only serial system only
bsdrp_console_serial () {
# Enable getty on console
    sed -i "" -e /tty[du]0/s/off/on/ ${NANO_WORLDDIR}/etc/ttys
	sed -i "" -e /tty[du]0/s/dialup/vt100/ ${NANO_WORLDDIR}/etc/ttys

    # Disable getty on syscons devices
    sed -i "" -e '/^ttyv[0-8]/s/    on/     off/' ${NANO_WORLDDIR}/etc/ttys

    # Tell loader to use serial console early.
    echo " -h" > ${NANO_WORLDDIR}/boot.config

	# Customize loader.conf file:
	echo 'boot_serial="YES"' >> ${NANO_WORLDDIR}/boot/loader.conf
	echo 'comconsole_speed="9600"' >> ${NANO_WORLDDIR}/boot/loader.conf
	echo 'console="comconsole"' >> ${NANO_WORLDDIR}/boot/loader.conf

}

# Enable use of keyboard/vga and serial
#
###### Warning ####
# BUG TO FIX: Don't boot if no serial port available!
#
bsdrp_console_dual () {
    sed -i "" -e /tty[du]0/s/off/on/ ${NANO_WORLDDIR}/etc/ttys
	sed -i "" -e /tty[du]0/s/dialup/vt100/ ${NANO_WORLDDIR}/etc/ttys

    # Tell loader to use serial and vga console.
    echo " -D" > ${NANO_WORLDDIR}/boot.config

	# Customize loader.conf file:
	echo 'boot_multicons="YES"' >> ${NANO_WORLDDIR}/boot/loader.conf
	echo 'boot_serial="YES"' >> ${NANO_WORLDDIR}/boot/loader.conf
	echo 'comconsole_speed="9600"' >> ${NANO_WORLDDIR}/boot/loader.conf
	echo 'console="comconsole,vidconsole"' >> ${NANO_WORLDDIR}/boot/loader.conf

}

# Standard vga console, with serial port configured as vt100 console
bsdrp_console_vga () {
	sed -i "" -e /tty[du]0/s/off/on/ ${NANO_WORLDDIR}/etc/ttys
	sed -i "" -e /tty[du]0/s/dialup/vt100/ ${NANO_WORLDDIR}/etc/ttys
}

# Secure BSDRP by using schg flag

bsdrp_secure () {
	# TODO: Need to check if flag allready set,
	#		otherwise it will disable it
	chflags -R schg ${NANO_WORLDDIR}/bin
	chflags -R schg ${NANO_WORLDDIR}/sbin
	chflags -R schg ${NANO_WORLDDIR}/boot/kernel
	chflags -R schg ${NANO_WORLDDIR}/libexec
	chflags -R schg ${NANO_WORLDDIR}/lib	
}
# Generate reference mtree file for referenc
# This must be the last function called
# This why it's the job of the make.sh to add the call 
# to this function at the end
bsdrp_mtree () {
		echo "./etc" > ${NANO_WORLDDIR}/mtree-exclude
		echo "./var" >> ${NANO_WORLDDIR}/mtree-exclude
		echo "./tmp" >> ${NANO_WORLDDIR}/mtree-exclude
		echo "./dev" >> ${NANO_WORLDDIR}/mtree-exclude
		echo "./mtree" >> ${NANO_WORLDDIR}/mtree-exclude
		echo "./mtree-exclude" >> ${NANO_WORLDDIR}/mtree-exclude
        chroot ${NANO_WORLDDIR} /bin/sh -exc \
        'mtree -x -ic -k flags,gid,mode,nlink,size,link,uid,md5digest,sha256digest -p / -X /mtree-exclude > /mtree'
		rm ${NANO_WORLDDIR}/mtree-exclude
		mv ${NANO_WORLDDIR}/mtree ${NANO_OBJ}
}

# Install Custom scripts and config files
customize_cmd cust_install_files

# Need to execute the bsdrp_custom after the cust_install_files
customize_cmd bsdrp_custom

# Allow root login via ssh
customize_cmd cust_allow_ssh_root

# Secure BSDRP
# To be enabled when function we ready
#customize_cmd bsdrp_secure
