#!/bin/sh
#
# Upgrade tool for BSD Router Project
# http://bsdrp.net
#
# Copyright (c) 2009-2013, The BSDRP Development Team
# All rights reserved.
# Based on the updatep1 and updatep2 script of nanoBSD
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#

#######################
##  Example of Usage ##
#######################	

# Put the bziped _.disk.image on my-server, in the  home dir of my-user,
# and from the nanoBSD device, enter this command:
# ssh my-user@my-server cat _.disk.image.bz2 | bzcat | upgrade
# ssh my-user@my-server cat _.disk.image.xz | xzcat | upgrade

# Strict script
set -eu

# Variables
ARCH=`uname -m`

#Load the NANO_DRIVE (label) variable:
. /etc/nanobsd.conf

LABEL=`cut -d '/' -f 2 /etc/nanobsd.conf`

# A usefull function (from: http://code.google.com/p/sh-die/)                                                         
die() { echo -n "EXIT: " >&2; echo "$@" >&2; exit 1; }     

mbr_get_info() {
	if mount | grep -q "/dev/${NANO_DRIVE}s1a on / "; then 
    	DST_SLICE="s2"
    	SRC_SLICE="s1"
	elif mount | grep -q "/dev/${NANO_DRIVE}s2a on / " ; then                
    	DST_SLICE="s1"
    	SRC_SLICE="s2"
	else
    	die "Can't detect active slice"
	fi

	DST_LABEL="${LABEL}${DST_SLICE}a"
	SRC_LABEL="${LABEL}${SRC_SLICE}a"
	BSD_SLICE="a"

	# ufs/BSDRPs1a     N/A  aacd0s1a
	boot_dev=/dev/`glabel status | grep ${SRC_LABEL} | awk '{ print $3; }'\
       	| cut -d s -f 1`

}

vtoc_get_info() {
	if mount | grep -q "/dev/${NANO_DRIVE}s1a on / "; then 
    	DST_SLICE="d"
		DST_LABEL="${LABEL}s2a"
    	SRC_SLICE="a"
		SRC_LABEL="${LABEL}s1a"
	elif mount | grep -q "/dev/${NANO_DRIVE}s2a on / " ; then                
    	DST_SLICE="a"
		DST_LABEL="${LABEL}s1a"
    	SRC_SLICE="d"
		SRC_LABEL="${LABEL}s2a"
	else
    	die "Can't detect active slice"
	fi
	BSD_SLICE=""
	# ufs/BSDRPs1a     N/A  ada1a
	boot_dev=/dev/`glabel status | grep ${SRC_LABEL} | awk '{ print $3; }'\
       	| sed 's/.$//'`

}

write_new_image() {
	# Blow away old system.
	if ! dd if=/dev/zero of=${boot_dev}${DST_SLICE} bs=1m count=1 > /dev/null 2>&1; then
		die "ERROR: Can't initialize destination partition ${boot_dev}${DST_SLICE}"
	fi

	# Copy in new system
	if ! dd of=${boot_dev}${DST_SLICE} obs=64k; then
		die "ERROR: Can't install the upgrade on ${boot_dev}${DST_SLICE}"
	fi

	# Check that it worked
	if ! fsck_ffs -n ${boot_dev}${DST_SLICE}${BSD_SLICE}; then
		die "ERROR: New file system ${boot_dev}${DST_SLICE}${BSD_SLICE} check failed"
	fi

	# Set Label into the new slice
	if ! tunefs -L ${DST_LABEL} ${boot_dev}${DST_SLICE}${BSD_SLICE}; then
		die "ERROR: Can't put label on the new filesystem"
	fi

	# Need to tune some files on the new partition
	if [ ! -d /tmp/sysupgrade ]; then
		mkdir /tmp/sysupgrade
	fi

	if ! mount /dev/ufs/${DST_LABEL} /tmp/sysupgrade; then
		die "ERROR: Can't mount new upgrade image"
	fi
	# Kept the /boot/loader.conf.local file
	if [ -f /boot/loader.conf.local ]; then
    	if ! cp /boot/loader.conf.local /tmp/sysupgrade/boot; then
        	echo "WARNING: Can't backup /boot/loader.conf.local"
    	fi
	fi

	# Preserve /boot.config if it's different or not existing
	# If "system dual-console" was used, this case is triggered
	# If user have changed serial speed, this case is triggered
	if [ -f /boot.config ]; then
		if ! cmp -s /boot.config /tmp/sysupgrade/boot.config; then
			if ! cp /boot.config /tmp/sysupgrade/boot.config; then
       			echo "WARNING: Can't backup /boot.config"
   			fi
		fi
	fi
	
	# Adapt fstab of the new system
	for f in /tmp/sysupgrade/etc/fstab /tmp/sysupgrade/conf/base/etc/fstab /etc/fstab; do
	    sed -i "" "s/${SRC_LABEL}/${DST_LABEL}/g" $f
	done

	# Check if their is a post-upgrade script on the newimage 
	# (This script will be start at the end of the upgrade process)
	if [ -f /tmp/sysupgrade/usr/local/sbin/post-upgrade ]; then
		if ! cp /tmp/sysupgrade/usr/local/sbin/post-upgrade /tmp/post-upgrade; then
			echo "WARNING: Can't copy post-upgrade script!"
		fi
	fi

	if ! umount /tmp/sysupgrade; then
		die "ERROR: Can't umount new image"
	fi 

	if ! rm -r /tmp/sysupgrade; then
		echo "WARNING: Can't remove tempdir"
	fi

	# Save the fstab to /cfg
	if mount | ! grep -q "/cfg"; then
		if ! mount /cfg; then
			die "ERROR: Cant't mount /cfg"
		fi
	fi
	if ! cp /etc/fstab /cfg; then
		umount /cfg
		die "ERROR: Can't save fstab"
	fi
	if ! umount /cfg; then
		die "ERROR: Can't umount /cfg"
	fi
}

x86_boot_modif () {
	# Change the default selection of the boot manager
    if ! boot0cfg -s `echo ${DST_SLICE} | cut -d 's' -f 2` -t 18 -v ${boot_dev}; then
        die "ERROR: Can't update FreeBSD bootloader"
    fi
	# Change the active partition
	if ! gpart set -a active -i `echo ${DST_SLICE} | cut -d 's' -f 2` ${boot_dev}; then
		die "ERROR: Can't update active partition"
	fi
}

arm_boot_modif () {
	echo "arm upgrade script not tested!"	
	if ! gpart set -a active -i `echo ${DST_SLICE} | cut -d 's' -f 2` ${boot_dev}; then
		die "ERROR: Can't update active partition"
	fi
}

vtoc_boot_modif () {
	# Get the actual disk and remove the last caracter
	# Thanks for this tips hrs@ !
	DISK=`kenv currdev | sed 's/.$//'`
	# Now DISK is like that: /pci@1f,0/ide@d/disk@1,0:
	if eeprom boot-device=$DISK${DST_SLICE}; then
		# http://docs.oracle.com/cd/E19127-01/ultra25.ws/819-1892-12/nvram.html
		# "Initiates a warm boot where most NVRAM configuration parameters are read by 
		# OpenBoot PROM. With power cycling or a cold boot, all NVRAM configuration parameters
		# are read by the OpenBoot PROM."
		echo "WARNING: You need to do a cold reboot for forcing OBP to re-read just modified eeprom value"
	else
		echo "WARNING! Fail to eeprom boot-device=$DISK${DST_SLICE}"
	fi
}
#### main function

case "${ARCH}" in
        i386|amd64)
			mbr_get_info
			write_new_image
	    	x86_boot_modif
            ;;
        arm)
			echo "WARNING: This script was never tested on ARM"
			mbr_get_info
			write_new_image
            arm_boot_modif
            ;;
        sparc64)
			vtoc_get_info
			write_new_image
            vtoc_boot_modif
            ;;
        *)
            die "Unsupported arch!"
esac

# Log
echo "BSDRP Upgrade complete"
logger BSDRP Upgrade complete

if [ -f /tmp/post-upgrade ]; then
	echo "Starting post-upgrade script..."
	logger Starting post-upgrade script
	chmod +x /tmp/post-upgrade
	/tmp/post-upgrade /dev/ufs/${DST_LABEL}
fi
