#!/bin/sh
#
# System tool for BSD Router Project 
# http://bsdrp.net
#
# Copyright (c) 2009-2013, The BSDRP Development Team 
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#

# Uncomment for enable the debug mode:
#set -xv

# Strict script
set -e
#set -u

# A usefull function (from: http://code.google.com/p/sh-die/)
die() { echo -n "EXIT: " >&2; echo "$@" >&2; exit 1; }

# Display help
usage () {
	echo "BSD Router Project: system tool"
	case ${SECOND_OPTION} in
	check-vm)
		echo "Check if running under a Virtualized environnement (Qemu, VirtualBox, etc.)"
		echo "- [quiet] : Display only the warning"
		exit 0
		;;
	integrity)
		echo "Check system integrity using a reference mtree file"
		echo "The given file can be .mtree, .mtree.bz2 or .mtree.xz"
		echo "Note: Do not keep the reference mtree file on the router!"
		exit 0
		;;
	virtualized)
		echo "Optimize the system for running as a VM"
		exit 0
		;;
	esac
	# value $0 is the name of the called script
	echo "Usage: $0 option"
	echo "  - check-vm            : Try to detect if used in a VM"
	echo "  - expand-data-slice   : Permit to grow the /data partition size"
	echo "  - dual-console        : Configure the system for dual vga/serial console"
	echo "  - integrity filename  : Check system integrity using the given reference file"
	echo "  - halt/stop           : Poweroff the system"
	echo "  - help/h [option]     : Display this help message. "
	echo "    if [option] given, display more detail about the option"
    echo "  - reboot/reload       : Restart the system"
	echo "  - rollback            : Revert to previous version"
	echo "  - tune                : Tune for routing (not persistent)"
	echo "  - virtualized         : Optimize for a VM use"
	exit 0
}

# dual-console

dual_console () {
	# We need to touch /boot/loader.conf.local for peristent changes
	grep -q 'boot_multicons="YES"' /boot/loader.conf.local && die "Dual console already configured"
	grep -q 'boot_multicons="YES"' /boot/loader.conf && die "Dual console already configured"
	mount -uw / || die "Can't mount / in RW mode"
	# Tell loader to use serial and vga console
	echo "-D" > /boot.config
    # Customize loader.conf file
	# We don't care of removing value in /boot/loader.conf, because loader.conf.local overwrite it
	echo '# system dual-console' >> /boot/loader.conf.local
    echo 'boot_multicons="YES"' >> /boot/loader.conf.local
    echo 'console="comconsole,vidconsole"' >> /boot/loader.conf.local
	mount -ur / || die "Error for remounting / in RO mode"
}

# Check system integrity
integrity () {
	[ "${SECOND_OPTION}" = "" ] && die "ERROR: Reference mtree filename missing"
	[ ! -f ${SECOND_OPTION} ] && die "ERROR: File ${SECOND_OPTION} didn't exist."
	FILE_TYPE=`file ${SECOND_OPTION} | cut -d : -f 2`
    echo "./etc" > /tmp/mtree-exclude
    echo "./var" >> /tmp/mtree-exclude
    echo "./tmp" >> /tmp/mtree-exclude
    echo "./dev" >> /tmp/mtree-exclude
	if echo "${FILE_TYPE}" | grep -qi "ASCII text"; then
		cmd="mtree -f ${SECOND_OPTION} -X /tmp/mtree-exclude -p /"
	elif echo "${FILE_TYPE}" | grep -qi bzip; then
		# Warning, the bzipped file can be any type of file!
		cmd="bzcat ${SECOND_OPTION} | mtree -X /tmp/mtree-exclude -p /"
	elif echo "${FILE_TYPE}" | grep -qi xz; then
		cmd="xz -dc ${SECOND_OPTION} | mtree -X /tmp/mtree-exclude -p /"
	else
		die "Is the given reference mtree file a good mtree file ?"
	fi
	echo "Here is the modified files comparing to the reference mtree file:"
	eval $cmd
	
}

#ask to save configuration
ask_save () {	
	echo "Warning: Unsaved changes detected !"
	config diff
	echo -n "Do you want to save the configuration before to continue or abort ? (y/n/a): "
	while [ "$USER_CONFIRM" != "y" -a "$USER_CONFIRM" != "n" -a "$USER_CONFIRM" != "a" ]; do
       	read USER_CONFIRM <&1
	done
	if [ "$USER_CONFIRM" = "y" ]; then
		config save	
	elif [ "$USER_CONFIRM" = "a" ]; then
		exit 0
	fi
}

#When installed on bigger usb key or hard-drive
#Destroy the data partition and re-create a big one
expand_data_slice () {

	#Load the NANO_DRIVE (label) variable:
	. /etc/nanobsd.conf

	if [ `uname -m` = "sparc64" ]; then
		boot_dev=/dev/`glabel status | grep ${NANO_DRIVE}s1a | awk '{ print $3; }' | sed 's/.$//'`
		echo "Not supported: sparc64 for this function"
		exit 0
	else
		boot_dev=/dev/`glabel status | grep ${NANO_DRIVE}s1a | awk '{ print $3; }' | cut -d s -f 1`
	fi
	label=`cut -d '/' -f 2 /etc/nanobsd.conf`

	if mount | grep -q "/data"; then
		die "/data is mounted, you need to unmount it"
    fi

	#free space
	FREE_SPACE=`gpart show ${boot_dev} | grep "\- free \-" | grep -v k | cut -d '-' -f 3`
	[ -z ${FREE_SPACE} ] && die "There is no space left on disk"
	echo "There is ${FREE_SPACE} available on your disk that can be use for /data"
	echo -n "Are you sure to repartition your disk ? (y/n)"
    while [ "$USER_CONFIRM" != "y" -a "$USER_CONFIRM" != "n" ]; do
        read USER_CONFIRM <&1
    done
    [ "$USER_CONFIRM" = "n" ] && die "User cancel"

	# Using "gpart resize" + growfs  is too slow and create a bug with 
	# the geom label (pr=kern/165962)
	#

	# Backup the s4 (data) partion
	dump -0auf/tmp/s4.dump ${NANO_DRIVE}s4 || die "ERROR: dumping ${NANO_DRIVE}s4 to /tmp failed"

	# Deleting partition s4
	# Need to check the partition delete on sparc64
	gpart delete -i 4 ${boot_dev} || die "Unable to gpart delete -i 4 ${boot_dev}"

	# Recreating s4 using full disk space
	gpart add -t freebsd-ufs ${boot_dev} || die "Unable gpart add -t freebsd ${boot_dev}"

	# Formatting the new partition (SUJ)
	LABEL=`cut -f 2 -d "/" /etc/nanobsd.conf`
	newfs -UjL ${LABEL}s4 ${boot_dev}s4 || die "Unable to newfs -UjtL ${LABEL}s4 ${boot_dev}s4"

	# Restoring the dump
	[ -d /tmp/slice ] || mkdir -p /tmp/slice
	mount ${NANO_DRIVE}s4 /tmp/slice || die "Unable to mount ${NANO_DRIVE}s4 /tmp/slice"
	cd /tmp/slice
	restore rf /tmp/s4.dump || die "Unable to restore rf /tmp/s4.dump"
	[ -f /tmp/slice/restoresymtable ] && rm -rf /tmp/slice/restoresymtable
	[ -f /etc/dumpdates ] && rm -rf /etc/dumpdates

	cd
	umount /tmp/slice || die "Can't unmount /tmp/slice, but it's done"

	echo "Done"

}
#Revert to the other system partition
#Big part of this function came from the upgrade script
#TODO: Need to merge the upgrade script and this script
# 0. Ask a user confirmation
# 1. Check if there is a previous release
# 2. Mount the previous and update the fstab
# 3. Change the active slice and bootloader default choice	
rollback () {
	# Get the NANO_GLABEL_SYS variable
	NANO_GLABEL_SYS=`cut -d '/' -f 2 /etc/nanobsd.conf`
	# Get the NANO_GLABEL_SYS_FULL variable
	# (kept the last number: 1 or 2)
	NANO_GLABEL_SYS_FULL=`mount | grep " / " | cut -d'/' -f4 | cut -d' ' -f1`

	# Get the disk name using its label
	NANO_DRIVE=`glabel status | grep ufs/${NANO_GLABEL_SYS_FULL} | awk '{print $3}' | cut -d's' -f1`

	# Get the full disk name
	NANO_FULLDRIVE=`glabel status | grep ufs/${NANO_GLABEL_SYS_FULL} | awk '{print $3}'`

	# Check and set final variable
	DST_SLICE=0

	if [ `echo $NANO_FULLDRIVE | /usr/bin/grep "s1"` ]; then 
    	DST_SLICE=2
    	SRC_SLICE=1
	fi
	if [ `echo $NANO_FULLDRIVE | /usr/bin/grep "s2"` ]; then                
    	DST_SLICE=1
    	SRC_SLICE=2
	fi

	[ $DST_SLICE = 0 ] && die "Can't detect active slice"
	
	# Check if old system was good
	if [ -e /dev/${NANO_DRIVE}s${DST_SLICE}a ]; then
		fsck_ffs -n /dev/${NANO_DRIVE}s${DST_SLICE}a || 
		die "ERROR: Missing or fsck problem on the previous system slice"
	else
		die "ERROR: This system was never upgraded"
	fi

	echo -n "Warning: Are you sure to revert to the previous release ? (y/n)"
	while [ "$USER_CONFIRM" != "y" -a "$USER_CONFIRM" != "n" ]; do
       	read USER_CONFIRM <&1
	done
	if [ "$USER_CONFIRM" = "n" ]; then
		exit 0	
	fi

	# Need to compare some files between the old and new partition
	[ -d /tmp/sysupgrade ] || mkdir /tmp/sysupgrade

	#   Adapt fstab of the old system
    sed -i "" "s/${NANO_GLABEL_SYS}s${SRC_SLICE}a/${NANO_GLABEL_SYS}s${DST_SLICE}a/g" /etc/fstab

	# Save the config file that include the fstab
	mount /cfg || die "ERROR: Cant't mount /cfg"
	if ! cp /etc/fstab /cfg; then
    	umount /cfg
		die "ERROR: Can't save fstab"
	fi
	umount /cfg || die "ERROR: Can't umount /cfg"
	case `uname -m` in
		i386|amd64)
			boot0cfg -s ${DST_SLICE} -t 18 -v ${NANO_DRIVE} ||
				die "ERROR: Can't update FreeBSD bootloader"
           
			gpart set -a active -i ${DST_SLICE} ${NANO_DRIVE} ||
				die "ERROR: Can't update active partition"
                ;;
        arm)
                echo "arm upgrade script not tested!"   
                gpart set -a active -i ${DST_SLICE} ${NANO_DRIVE} ||
                    die "ERROR: Can't update active partition"
                ;;
        sparc64)
                echo "You need to configure OBP for booting on"
                ;;
	esac

# Log
echo "BSDRP system rollback complete"
logger BSDRP system rollback complete

}
# Tune system
# To be replaced by the tuning script
tune () {
	echo "Tune system for routing"
	#https://calomel.org/network_performance.html
	#
	# kernel socket buffer space
	sysctl kern.ipc.maxsockbuf=16777216
	# kernel mbuf space raised 275MB of kernel dedicated ram
	# Warning: need to change vm.kmem_size to 1G minimum
	sysctl kern.ipc.nmbclusters=262144
	# size of the listen queue for accepting new TCP connections
	sysctl kern.ipc.somaxconn=32768
	# increase the limit of the open sockets
	sysctl kern.ipc.maxsockets=204800
	# do not processes any TCP options in the TCP headers
	sysctl net.inet.ip.process_options=0
	# do not allow ip header redirects
	sysctl net.inet.ip.redirect=0
	# route cache expire in two seconds
	sysctl net.inet.ip.rtexpire=2
	sysctl net.inet.ip.rtminexpire=2
	# route cache entries increased
	sysctl net.inet.ip.rtmaxcache=256
	# drop any TCP packets to closed ports
	sysctl net.inet.tcp.blackhole=2
	# no need to delay ACK's
	sysctl net.inet.tcp.delayed_ack=0
	# drop TCP packets which have SYN and FIN set
	sysctl net.inet.tcp.drop_synfin=1
	# close lost tcp connections in 7.5 seconds (default 30)
	sysctl net.inet.tcp.msl=7500
    # do not create TIME_WAIT state for localhost
	sysctl net.inet.tcp.nolocaltimewait=1
	# disable MTU path discovery
	sysctl net.inet.tcp.path_mtu_discovery=0
	# TCP receive buffer space
	sysctl net.inet.tcp.recvbuf_max=16777216
	# increase buffers for incoming data
	sysctl net.inet.tcp.recvspace=8192
	# TCP send buffer space
	sysctl net.inet.tcp.sendbuf_max=16777216
	# decrease buffers for outgoing data
	sysctl net.inet.tcp.sendspace=16384
	# drop any UDP packets to closed ports
	sysctl net.inet.udp.blackhole=1
	#sysctl net.inet.tcp.rfc1323=1
	#sysctl net.inet.tcp.sack.enable=1
	#sysctl net.inet.tcp.sendbuf_auto=1
	#sysctl net.inet.tcp.hostcache.expire=1
	echo "Done, but warning: Theses changes are not persistent !"
}

# Check if cfg was modified
check_cfg () {
	echo "Checking if configuration is saved..."
	# Don't know why I can't test the exist value of config diff quit in my if
	set +e
    config diff fast
    if [ $? -eq 1 ]; then
        ask_save
    fi
    set -e
}

# Reboot
sys_reboot () {
	check_cfg
	echo "Rebooting..."
	# Never use reboot under FreeBSD !
	shutdown -r now
}

# Halt
sys_halt () {
	check_cfg
	echo "Power halting..."
	# Never use halt under FreeBSD !
	shutdown -p now
}

# Check if system is under a VM
check_vm () {
	# Look for VM environnement
	if sysctl -n kern.vm_guest | grep -q "none"; then
		VM_FOUND=false
	else
       	VM_FOUND=true
   	fi
    if (${VM_FOUND}); then
		if [ "${SECOND_OPTION}" != "quiet" ]; then
        	echo "VM environnement detected"
		fi
    fi
	
	KERN_HZ=`sysctl -n kern.hz`
	if [ ${KERN_HZ} -gt 100 ]; then
		NOT_TUNED=true
	else
		NOT_TUNED=false
	fi

	# Stupid if, but don't know how to use an "add" condition in the if
    if ( ${VM_FOUND} ) && ( ${NOT_TUNED} ); then
       	echo "WARNING: Current (Default) kern.hz value too high for a VM use!"
       	echo 'Use "system virtualized" for lower it'
	fi
    exit 0
}

# Tune for VM usage
sys_virtualized () {

	echo "This step will configure BSDRP for being use as a VM:"
	echo "- Reduce kern.hz to 100"
	echo "- Load virtio modules"
	echo -n "Do you want to continue ? (y/n): "
	while [ "$USER_CONFIRM" != "y" -a "$USER_CONFIRM" != "n" ]
	do
        read USER_CONFIRM <&1
	done
	
	[ "$USER_CONFIRM" = "n" ] && die "Canceling"
	
	mount -uw / || die "ERROR: mount -uw /"

	echo '# system virtualized add these lines:' >> /boot/loader.conf.local
	if [ `echo kern.hz=100 >> /boot/loader.conf.local` ]; then
		die "Error: Can't modify loader.conf"
	fi
	echo 'virtio_load="YES"' >> /boot/loader.conf.local
    echo 'virtio_load="YES"' >> /boot/loader.conf.local
    echo 'virtio_pci_load="YES"' >> /boot/loader.conf.local
    echo 'virtio_blk_load="YES"' >> /boot/loader.conf.local
    echo 'if_vtnet_load="YES"' >> /boot/loader.conf.local
    echo 'virtio_balloon_load="YES"' >> /boot/loader.conf.local
	echo 'virtio_scsi_load="YES"' >> /boot/loader.conf.local

	mount -ur / || die "ERROR: mount -ur /"

	echo "A reboot is needed for apply changes."
	echo "Don't forget to modify rc.conf for declaring ifconfig_vtnetX"
	exit 0
}

###################
## Main function ##
###################

# Get options passed by user
if [ $# -eq 0 ]; then
	FIRST_OPTION=""
	SECOND_OPTION=""
	THIRD_OPTION=""
	usage
	exit 0
fi

FIRST_OPTION="$1"

if [ $# -ge 2 ]; then
	SECOND_OPTION="$2"
else
	SECOND_OPTION=""
fi
if [ $# -ge 3 ]; then
	THIRD_OPTION="$3"
else
	THIRD_OPTION=""
fi

case "$FIRST_OPTION" in
	check-vm)
        check_vm
        ;;
	dual-console)
		dual_console
		;;
	expand-data-slice)
		expand_data_slice
		;;
	halt|stop)
		sys_halt
		;;
    help|h)
        usage
        ;;
    integrity)
        integrity
        ;;
	reboot|reload)
		sys_reboot
		;;
	rollback)
		rollback
		;;
    tune)
        tune
        ;;
	virtualized)
		sys_virtualized
		;;
	*)
		usage
		;;
esac
