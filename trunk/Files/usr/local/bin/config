#!/bin/sh
#
# Configuration tool for BSD Router Project 
#
# Copyright (c) 2009, The BSDRP Development Team 
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#

# Uncomment for enable the debug mode:
#set -xv

# Stop the script automatically on error
set -e

# Get options passed by user
getoption () {
	FIRST_OPTION="$1"
	SECOND_OPTION="$2"
	THIRD_OPTION="$3"
	case "$FIRST_OPTION" in
		save)
			save_cfg
			;;
		apply)
			apply_cfg 
			;;
		diff)
			diff
			;;
		rollback)
			rollback
			;;
		put)
			put
			;;
		get)
			get
			;;
		reset)
			reset
			;;
		password|pass)
                        password_root
                        ;;

		help|h)
			usage
			;;
		*)
			echo "illegal option: $FIRST_OPTION"
			usage
			;;
	esac
}

# Display help
usage () {
	echo "BSDRP configuration tool"
	if $SECOND_OPTION="apply"
	then
		echo "Options for apply:"
		echo " - secure timeout : Automatically rollback if the command confirm is not enter before timeout (in minute)"
		echo " - confirm : Need to be enter for cancelling the auto rollback feature enabled with the secure command."
		echo " - in timeout : Apply configuration after timeout (in minutes)"
		echo " - at date/time : Apply configuration at date/time"
		echo " - cancel : Cancel scheduled apply"
	else
# value $0 is the name of the called script
		echo "Usage: $0 option"
		echo "  - save     : Save current config"
		echo "  - apply    : Apply current config"
		echo "  - rollback : Revert to previous config"
		echo "  - put      : Put config to a remote server"
		echo "  - get      : Get config from remote server"
		echo "  - reset  : Return to default configuration"
		echo "  - password (pass) : Change root password"
		echo "  - help (h) [option]  : Display this help message. "
		echo "		  	If [option] given, display more detail about"
	fi
	exit 0
}

# Mount /cfg
mount_cfg () {
	trap "umount /cfg" 1 2 15 EXIT
	mount /cfg
}

# Umount /cfg
umount_cfg () {
	umount /cfg
	trap 1 2 15 EXIT
}

# Archive cfg
archive_cfg () {
	if [ ! -d /cfg/archives ]
	then
		mkdir /cfg/archives
	else
		if [ -f /cfg/archives/rollback.tar.bz2 ]
		then
			rm /cfg/archives/rollback.tar.bz2
		fi
	fi
	tar -cjvpf /cfg/archives/rollback.tar.bz2 -C /cfg/ --exclude archives .
	if [ $? -eq 0 ]	
	then
		echo "Actual configuration archived."
	else
		echo "Meet an error during archive step of actual configuration"
		exit 1
	fi
}
# save configuration
save_cfg () {
	mount_cfg
	archive_cfg
	# save config files
	echo "TO DO: Need to copy modified file into /cfg (including subdir)"
	echo "Because modified but non existant file in /cfg will no be copied"
	# Algo:
	# for all files (and subdir) in /etc:
	#    if exist /cfg/file then
	#	cmp /etc/file with /cfg/file and cp to /cfg if diff
	#    else
	#       cmp /default/file with /etc/file and cp to /cf if dif
	#   fi
	# end for
	(
	cd /cfg
	for i in "$@" `find * -type f`
	do
       	 cmp -s /etc/$i /cfg/$i || cp -pfv /etc/$i /cfg/$i
	done
	)
	# save ssh keys
	if [ -d /cfg/ssh ]
	then
		cd /etc/ssh
		for i in "$@" `find ssh_host_* -type f`
        	do
         		cmp -s /etc/ssh/$i /cfg/ssh/$i || cp -pfv /etc/ssh/$i /cfg/ssh/$i
        	done
	else
		mkdir -p /cfg/ssh
		(
		cd /etc/ssh
		cp ssh_host_* /cfg/ssh
		)
	fi

	umount_cfg
	exit 0
}

# Apply configuration
apply_cfg () {
	echo "Apply configuration"
	case "$SECOND_OPTION" in
                secure)
                        echo "Apply config and rollback in $THIRD_OPTION minutes"
                        ;;
		confirm)
			echo "Cancel the auto-rollback introduce by the apply secure"
			;;
		in)
			echo "Apply config in $THIRD_OPTION minutes"
			;;
		at)
			echo "Apply config at $THIRD_OPTION date"
			;;
		cancel)
			echo "Cancel in and at apply"
			;;
		*)
		echo "This function will force routing process to reload the configuration files"
		echo "Need to add a sub option: apply secure timeout"
		echo "this option will wait for the new command: apply confirm before the end of the timeout (in minutes)"
		echo "If the admin don't use this command: BSDRP will rollback the configuration automatically"	
		;;	
	esac
	exit 0
}

# Display diff between current and saved configuration
diff () {
	echo "Display diff between current and saved configuration"
	exit 0
}

# Rollback to previous configuration
rollback () {
	echo "Rollback to previous saved configuration"
	echo "And apply automatically ???"
	exit 0
}

# Send configuration to an svn/cvs/scp server ?
put () {
	echo "Send configuration to an svn/cvs/scp server"
	exit 0
}

# Get configuration from an svn/cvs/scp server
get () {
	echo "Get configuration from an svn/cvs/scp server"
	exit 0
}

# Clear all existing configuration and return to default setting
reset () {
        echo "Clear existing configuration and return to default setting"
        exit 0
}

# Change root password
password_root () {
	passwd root

	cfgslice=`grep '/cfg' /etc/fstab | cut -d \  -f 1`

	trap "umount /cfg" 1 2 15 EXIT
	mount /cfg
	cp /etc/master.passwd /etc/passwd /etc/pwd.db /etc/spwd.db /etc/group /cfg
	umount /cfg
	trap 1 2 15 EXIT

}
###################
## Main function ##
###################

getoption $*
