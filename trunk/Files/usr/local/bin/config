#!/bin/sh
#
# Configuration tool for BSD Router Project 
#
# Copyright (c) 2009, The BSDRP Development Team 
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#

# Uncomment for enable the debug mode:
#set -xv

# Stop the script automatically on error
set -e

# Get options passed by user
getoption () {
	FIRST_OPTION="$1"
	SECOND_OPTION="$2"
	THIRD_OPTION="$3"
	case "$FIRST_OPTION" in
	save)
		save_cfg
		;;
	apply)
		apply_cfg 
		;;
	diff)
		diff
		;;
	rollback)
		rollback
		;;
	put)
		put
		;;
	get)
		get
		;;
	reset)
		reset
		;;
	help|h)
		usage
		;;
	*)
		if [ "${FIRST_OPTION}" = "" ];
		then
			echo "missing option"
		else	
			echo "illegal option: $FIRST_OPTION"
		fi
		usage
		;;
	esac
}

# Display help
usage () {
	echo "BSD Router Project configuration tool"
	case "${SECOND_OPTION}" in
	apply)
		echo "Options for apply:"
		echo " - secure timeout : Automatically rollback if the command confirm is not enter before timeout (in minute)"
		echo " - confirm : Need to be enter for cancelling the auto rollback feature enabled with the secure command."
		echo " - in timeout : Apply configuration after timeout (in minutes)"
		echo " - at date/time : Apply configuration at date/time"
		echo " - cancel : Cancel scheduled apply"
		exit 0
		;;
	diff)
		echo "Option fo diff:"
		echo " - quiet : Don't display file (return 1 if changes found, 0 otherwise)"
		exit 0
		;;
	esac

# value $0 is the name of the called script
	echo "Usage: $0 option"
    echo "  - diff     : Show diff between current and saved config"
	echo "  - save     : Save current config"
	echo "  - apply    : Apply current config"
	echo "  - rollback : Revert to previous config"
	echo "  - put      : Put config to a remote server"
	echo "  - get      : Get config from remote server"
	echo "  - reset  : Return to default configuration"
	echo "  - help (h) [option]  : Display this help message. "
	echo "		  	If [option] given, display more detail about the option"
	exit 0
}

# Mount /cfg
mount_cfg () {
	trap "umount /cfg" 1 2 15 EXIT
	mount /cfg
}

# Umount /cfg
umount_cfg () {
	umount /cfg
	trap 1 2 15 EXIT
}

# Mount data
mount_data () {
	trap "umount /data" 1 2 15 EXIT
	mount /dev/ufs/data /mnt
}

# umount data
umount_data () {
	umount /mnt
	trap 1 2 15 EXIT
}
# Archive cfg
archive_cfg () {
	mount_data
	echo "Archive configuration files..."
	if [ ! -d /mnt/archives ]
	then
		mkdir /mnt/archives
	else
		if [ -f /mnt/archives/rollback.tar.bz2 ]
		then
			rm /mnt/archives/rollback.tar.bz2
		fi
	fi
	tar -cjvpf /mnt/archives/rollback.tar.bz2 -C /cfg/ . 2>/dev/null

	if [ $? -eq 0 ]	
	then
		echo "Archive done."
	else
		echo "Meet an error."
		umount_data	
		exit 1
	fi
	umount_data
}
# save configuration
save_cfg () {
	mount_cfg
	archive_cfg
	echo "Saving configuration..."
	(
	cd /etc
	for i in "$@" `find * -type f`
	do
		if [ -f /cfg/$i ]
		then
			cmp -s /etc/$i /cfg/$i || cp -pfv /etc/$i /cfg/$i 2>/dev/null
		else
			cmp -s /conf/base/etc/$i /etc/$i || (find $i -print |  cpio -dumpv /cfg/ 2>/dev/null)
		fi
	done
	)	

	# save ssh keys
	if [ -d /cfg/ssh ]
	then
		cd /etc/ssh
		for i in "$@" `find ssh_host_* -type f`
        	do
         		cmp -s /etc/ssh/$i /cfg/ssh/$i || cp -pfv /etc/ssh/$i /cfg/ssh/$i 2>/dev/null
        	done
	else
		mkdir -p /cfg/ssh
		(
		cd /etc/ssh
		cp ssh_host_* /cfg/ssh 2>/dev/null
		)
	fi

	umount_cfg
	echo "Done."
	exit 0
}

# Apply configuration
apply_cfg () {
	echo "TO DO: Apply configuration"
	case "$SECOND_OPTION" in
        secure)
            echo "TO DO: Apply config and rollback in $THIRD_OPTION minutes"
            ;;
		confirm)
			echo "TO DO: Cancel the auto-rollback introduce by the apply secure"
			;;
		in)
			echo "TO DO: Apply config in $THIRD_OPTION minutes"
			;;
		at)
			echo "TO DO: Apply config at $THIRD_OPTION date"
			;;
		cancel)
			echo "TO DO: Cancel in and at apply"
			;;
		*)
		echo "This function will force routing process to reload the configuration files"
		echo "Need to add a sub option: apply secure timeout"
		echo "this option will wait for the new command: apply confirm before the end of the timeout (in minutes)"
		echo "If the admin don't use this command: BSDRP will rollback the configuration automatically"	
		;;	
	esac
	exit 0
}

# Display diff between current and saved configuration
# Return 0 if no diff found
# Return 1 if diff found
diff () {
	mount_cfg
	# Don't know how to exchange variable with the subshell
	# Then using a file in /tmp
	if [ -f /tmp/DIFF_FOUND ]; then
		rm /tmp/DIFF_FOUND
	fi
	if [ ! "$SECOND_OPTION" = "quiet" ]; then
		echo "Looking for differences between running and saved configuration files..."
	fi
	(
	cd /etc
	for i in "$@" `find * -type f`
	do
		if [ -f /cfg/$i ]
		then
			if ! cmp -s /etc/$i /cfg/$i; then
				if [ ! "$SECOND_OPTION" = "quiet" ]; then
					echo "/etc/$i"
				fi
				echo "1" > /tmp/DIFF_FOUND
			fi
		else
			if ! cmp -s /conf/base/etc/$i /etc/$i; then
				if [ ! "$SECOND_OPTION" = "quiet" ]; then
					find $i -print
				fi
				echo "1" > /tmp/DIFF_FOUND
			fi
		fi
	done
	)
	umount_cfg
	if [ -f /tmp/DIFF_FOUND ]; then
		rm /tmp/DIFF_FOUND
		exit 1
	else
		if [ ! "$SECOND_OPTION" = "quiet" ]; then
			echo "None found."
		fi
		exit 0
	fi
}

# Rollback to previous configuration
rollback () {
	echo "Rollback the archived configuration"
	mount_data
	# Check if archive exist
	if [ -f /mnt/archives/rollback.tar.bz2 ]
	then
		# Backup fstab file
		cp /etc/fstab /tmp
		# Unzip the archive to /etc
		tar -x -C /etc/ -f /mnt/archives/rollback.tar.bz2
		if [ ! $? -eq 0 ]	
		then
			echo "Error during restoring previous configuration."
			umount_data
			exit 1
		fi
		# Restore fstab file
		cp /tmp/fstab /etc/fstab
	else
		echo "No archive file found."
		echo "You need to save your configuration once before to rollback it"
		umount_data
		exit 1
	fi
	umount_data
	echo "Done."
	echo "TO DO: need to force process to reload config"
	exit 0
}

# Send configuration to an svn/cvs/scp server ?
put () {
	echo "TO DO"
	echo "Send configuration to an svn/cvs/scp server"
	exit 0
}

# Get configuration from an svn/cvs/scp server
get () {
	echo "TO DO"
	echo "Get configuration from an svn/cvs/scp server"
	exit 0
}
	

# Clear all existing configuration and return to default setting
reset () {
		echo "TO DO"
        echo "Clear existing configuration and return to default setting"
		echo "Warning: Kept the fstab!"
        exit 0
}

###################
## Main function ##
###################

getoption $*
