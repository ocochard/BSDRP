#!/bin/sh
#
# Show tool for BSD Router Project 
#
# Copyright (c) 2009, The BSDRP Development Team 
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#

# Uncomment for enable the debug mode:
# set -xv

# Stop the script automatically on error
set -e

# Get options passed by user
getoption () {
	FIRST_OPTION="$1"
	SECOND_OPTION="$2"
	THIRD_OPTION="$3"
	case "$FIRST_OPTION" in
		version|ver)
			version
			;;
		route)
			route 
			;;
		process|proc)
			process
			;;
		help|h)
			usage
			;;
		license|lic)
			license
			;;
		memory|mem)
			memory
			;;
		authors|author)
			authors
			;;
		packages|package)
			packages
			;;
		*)
			echo "illegal option: $FIRST_OPTION"
			usage
			;;
	esac
}

# Display help
usage () {
	echo "BSD Router Project show tool"
	case "$SECOND_OPTION" in
                route)
			echo "Options for route:"
	                echo " - ipv4/4 : Display only IPv4 routes"
			echo " - ipv6/6 : Display only IPv6 routes" 
			;;
		process|proc)
			echo "Options for process:"
			echo " - cpu: CPU of each process"
			echo " - memory/mem : Memory usage of each process"
			echo " - int : Interrupt usage of each process"
			;;
		*)
# value $0 is the name of the called script
		echo "Usage: $0 option"
		echo "  - route    : Display routes"
		echo "  - process/proc  : Display process information"
		echo "  - version/ver  : Display BSDRP version"
		echo "  - license/lic  : Display BSDRP license"
		echo "  - memory/mem   : Display general memory usage"
		echo "  - packages     : Display lists of installed packages"
		echo "  - authors      : Display authors and contributors list"
		echo "  - help/h [option]  : Display this help message. "
		echo "		  	If [option] given, display more detail about"
			;;	
	esac	
	exit 0
}

# Display LICENSE
license () {
	cat /root/LICENSE
	exit 0
} 

# Display AUTHORS
authors () {
	cat /root/AUTHORS
	exit 0
}

# Display packages
packages () {
	pkg_info
	exit 0
}
# Display version
version () {
	VERSION=`cat /etc/BSDRP.version`
	FREEBSD_VERSION=`uname -srp`
    	echo "BSD Router Project version: ${VERSION}"
    	echo "Based on: ${FREEBSD_VERSION}"
	exit 0
}

# Display routes
route () {
	case "$SECOND_OPTION" in
                ipv4|4)
                       netstat -rn -f inet 
			;;
		ipv6|6)
			netstat -rn -f inet6	
			;;
		*)
		netstat -rn
		;;	
	esac
	exit 0
}
# Display memory usage information
# This function is a shell re-writting of the perl script:
##  freebsd-memory -- List Total System Memory Usage
##  Copyright (c) 2003-2004 Ralf S. Engelschall <rse@engelschall.com>
## http://www.cyberciti.biz/files/scripts/freebsd-memory.pl.txt

#   round the physical memory size to the next power of two which is
#   reasonable for memory cards. We do this by first determining the
#   guessed memory card size under the assumption that usual computer
#   hardware has an average of a maximally eight memory cards installed
#   and those are usually of equal size.

mem_rounded () {
    mem_size=$1
    chip_size=1
    chip_guess=`expr $mem_size / 8 - 1`
    while [ $chip_guess != 0 ]
	do
        #chip_guess >>= 1
        #chip_size  <<= 1
		chip_guess=`expr $chip_guess / 2`
		chip_size=`expr $chip_size \* 2`
    done
    mem_round=`expr \( $mem_size / $chip_size + 1 \) \* $chip_size`
    echo $mem_round
	exit 0
}

memory () {
	#   determine the individual known information
	#   NOTICE: forget hw.usermem, it is just (hw.physmem - vm.stats.vm.v_wire_count).
	#   NOTICE: forget vm.stats.misc.zero_page_count, it is just the subset of
	#           vm.stats.vm.v_free_count which is already pre-zeroed.
	mem_phys=`sysctl -n hw.physmem`
	set +e
	mem_hw=`mem_rounded $mem_phys`
	set -e
	mem_all=`expr \`sysctl -n vm.stats.vm.v_page_count\` \* \`sysctl -n hw.pagesize\``
	mem_wire=`expr \`sysctl -n vm.stats.vm.v_wire_count\` \* \`sysctl -n hw.pagesize\``
	mem_active=`expr \`sysctl -n vm.stats.vm.v_active_count\` \* \`sysctl -n hw.pagesize\``
	mem_inactive=`expr \`sysctl -n vm.stats.vm.v_inactive_count\` \* \`sysctl -n hw.pagesize\``
	mem_cache=`expr \`sysctl -n vm.stats.vm.v_cache_count\` \* \`sysctl -n hw.pagesize\``
	mem_free=`expr \`sysctl -n vm.stats.vm.v_free_count\` \* \`sysctl -n hw.pagesize\``

	#   determine the individual unknown information
	mem_gap_vm=`expr $mem_all - \( $mem_wire + $mem_active + $mem_inactive + $mem_cache + $mem_free \)`
	mem_gap_sys=`expr $mem_phys - $mem_all`
	mem_gap_hw=`expr $mem_hw - $mem_phys`

	#   determine logical summary information
	mem_total=$mem_hw
	mem_avail=`expr $mem_inactive + $mem_cache + $mem_free`
	mem_used=`expr $mem_total - $mem_avail`

	#   print system results
	printf "SYSTEM MEMORY INFORMATION:\n"
	printf "mem_wire:      %12d (%7dMB) [%3d%%] %s\n" $mem_wire `expr $mem_wire / \( 1024 \* 1024 \)` `expr $mem_wire \* 100 / $mem_all` "Wired: disabled for paging out"
	printf "mem_active:  + %12d (%7dMB) [%3d%%] %s\n" $mem_active `expr $mem_active / \( 1024 \* 1024 \)` `expr $mem_active \* 100 / $mem_all` "Active: recently referenced" 
	printf "mem_inactive:+ %12d (%7dMB) [%3d%%] %s\n" $mem_inactive `expr $mem_inactive / \( 1024 \* 1024 \)` `expr $mem_inactive \* 100 / $mem_all` "Inactive: recently not referenced"
	printf "mem_cache:   + %12d (%7dMB) [%3d%%] %s\n" $mem_cache `expr $mem_cache / \( 1024 \* 1024 \)` `expr $mem_cache \* 100 / $mem_all` "Cached: almost avail. for allocation" 
	printf "mem_free:    + %12d (%7dMB) [%3d%%] %s\n" $mem_free `expr $mem_free / \( 1024 \* 1024 \)` `expr $mem_free \* 100 / $mem_all` "Free: fully available for allocation"
	printf "mem_gap_vm:  + %12d (%7dMB) [%3d%%] %s\n" $mem_gap_vm `expr $mem_gap_vm / \( 1024 \* 1024 \)` `expr $mem_gap_vm \* 100 / $mem_all` "Memory gap: UNKNOWN"
	printf "______________ ____________ ___________ _______\n"
	printf "mem_all:     = %12d (%7dMB) [100%%] %s\n" $mem_all `expr $mem_all / \( 1024 \* 1024 \)` "Total real memory managed"
	printf "mem_gap_sys: + %12d (%7dMB)        %s\n" $mem_gap_sys `expr $mem_gap_sys / \( 1024 \* 1024 \)` "Memory gap: Kernel?!"
	printf "______________ ____________ ___________\n"
	printf "mem_phys:    = %12d (%7dMB)        %s\n" $mem_phys `expr $mem_phys / \( 1024 \* 1024 \)` "Total real memory available"
	printf "mem_gap_hw:  + %12d (%7dMB)        %s\n" $mem_gap_hw `expr $mem_gap_hw / \( 1024 \* 1024 \)` "Memory gap: Segment Mappings?!"    
	printf "______________ ____________ ___________\n"
	printf "mem_hw:      = %12d (%7dMB)        %s\n" $mem_hw `expr $mem_hw / \( 1024 \* 1024 \)` "Total real memory installed"    
	#   print logical results
	printf "\n"
	printf "SYSTEM MEMORY SUMMARY:\n"
	printf "mem_used:      %12d (%7dMB) [%3d%%] %s\n" $mem_used `expr $mem_used / \( 1024 \* 1024 \)` `expr $mem_used \* 100 / $mem_total` "Logically used memory"
	printf "mem_avail:   + %12d (%7dMB) [%3d%%] %s\n" $mem_avail `expr $mem_avail / \( 1024 \* 1024 \)` `expr $mem_avail \* 100 / $mem_total` "Logically available memory"
	printf "______________ ____________ __________ _______\n"
	printf "mem_total:   = %12d (%7dMB) [100%%] %s\n" $mem_total `expr $mem_total / \( 1024 \* 1024 \)` "Logically total memory"
	exit 0
}
# Display process information
process () {
        case "$SECOND_OPTION" in
                cpu)
                        top -b
                        ;;
                memory|mem)
                        vmstat -h -m
                        ;;
		int)
			vmstat -h -i
			;;
                *)
			top -b
               		;;
        esac
        exit 0
}


###################
## Main function ##
###################

getoption $*
