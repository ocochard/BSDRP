#!/bin/sh
#
# System tool for BSD Router Project 
# http://bsdrp.net
#
# Copyright (c) 2009-2010, The BSDRP Development Team 
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#

# Uncomment for enable the debug mode:
#set -xv

# Strict script
set -e
set -u

# Display help
usage () {
	echo "BSD Router Project: system tool"
	case ${SECOND_OPTION} in
	check-vm)
		echo "Check if running under a Virtualized environnement (Qemu, VirtualBox, etc.)"
		echo "- [quiet] : Display only the warning"
		exit 0
		;;
	virtualized)
		echo "Optimize the system for running as a VM"
		exit 0
		;;
	integrity)
		echo "Check system integrity using a reference mtree file"
		echo "The given file can be .mtree or .mtree.bz2"
		echo "Note: Do not keep the reference mtree file on the router!"
		exit 0
		;;
	esac
	# value $0 is the name of the called script
	echo "Usage: $0 option"
    echo "  - reboot/reload       : Restart the system"
	echo "  - integrity filename  : Check system integrity using the given reference file"
	echo "  - halt/stop           : Poweroff the system"
	echo "  - virtualized         : Optimize for a VM use"
	echo "  - check-vm            : Try to detect if used in a VM"
	echo "  - endpoint            : Tune for endpoint usage, permit to do bench from BSDRP (not persistent)"
	echo "  - help/h [option]     : Display this help message. "
	echo "		if [option] given, display more detail about the option"
	exit 0
}

# Check system integrity
integrity () {
	if [ "${SECOND_OPTION}" = "" ]; then
		echo "ERROR: Reference mtree filename missing"
		exit 1
	fi
	if [ ! -f ${SECOND_OPTION} ]; then
		echo "ERROR: File ${SECOND_OPTION} didn't exist."
		exit 1 
	fi
	FILE_TYPE=`file ${SECOND_OPTION} | cut -d : -f 2`
	
	if echo "${FILE_TYPE}" | grep -q "ASCII text"; then
		cmd="mtree -f ${SECOND_OPTION} -p /"
	elif echo "${FILE_TYPE}" | grep -q bzip; then
		# Warning, the bzipped file can be any type of file!
		cmd="bzcat ${SECOND_OPTION} | mtree -p /"
	else
		echo "Is the given reference mtree file a good mtree file ?"
		exit 1
	fi
	echo "Here is the modified files comparing to the reference mtree file:"
	eval $cmd
	
}

#ask to save configuration
ask_save () {	
	echo "Warning: Unsaved changes detected !"
	echo "Do you want to save the configuration before to continue ? (y/n)"
	while [ "$USER_CONFIRM" != "y" -a "$USER_CONFIRM" != "n" ]; do
       	read USER_CONFIRM <&1
	done
	if [ "$USER_CONFIRM" = "y" ]; then
		config save	
	fi
}

# Tune system for endpoint usage
endpoint () {
	echo "Tune system for TCP/UDP endpoint"
	echo "This is a mandatory step before using BSDRP as TCP/UDP host for bench"
	sysctl kern.ipc.somaxconn=2048
	set +e
	sysctl kern.ipc.nmbclusters=32768
	set -e
	sysctl kern.ipc.maxsockbuf=8388608
	sysctl net.inet.tcp.sendbuf_max=16777216
	sysctl net.inet.tcp.recvbuf_max=16777216
	sysctl net.inet.tcp.inflight.enable=0
	sysctl net.inet.tcp.sendspace=65536
	sysctl net.inet.tcp.recvspace=65536
	sysctl net.inet.udp.recvspace=65536
	sysctl net.inet.tcp.sendbuf_inc=16384
	sysctl net.inet.tcp.recvbuf_inc=524288
	sysctl net.inet.tcp.inflight.enable=0
	sysctl net.inet.tcp.rfc1323=1
	sysctl net.inet.tcp.sack.enable=1
	sysctl net.inet.tcp.path_mtu_discovery=1
	sysctl net.inet.tcp.sendbuf_auto=1
	sysctl net.inet.tcp.hostcache.expire=1
	sysctl net.inet.tcp.delayed_ack=0
	echo "Done, but warning: Theses change are not persistent !"
}

# Check if cfg was modified
check_cfg () {
	echo "Checking if configuration is saved."
	# Don't know why I can't test the exist value of config diff quit in my if
	set +e
    config diff quiet
    if [ $? -eq 1 ]; then
        ask_save
    fi
    set -e
}

# Reboot
sys_reboot () {
	check_cfg
	echo "Rebooting..."
	# Never use reboot under FreeBSD !
	shutdown -r now
}

# Halt
sys_halt () {
	check_cfg
	echo "Power halting..."
	# Never use halt under FreeBSD !
	shutdown -p now
}

# Check if system is under a VM
check_vm () {
	# Look for Qemu
	if sysctl -q dev.acpi.0.%desc | grep -q QEMU; then
       	VM_FOUND=true
	else
		VM_FOUND=false
    	fi
	# Look for VMware
	if ! (${VM_FOUND}); then
		if sysctl -q dev.ad.0.%desc | grep -q VMware; then
       		VM_FOUND=true
    	else
        	VM_FOUND=false
    	fi
	fi
	# Look for Virtualbox
	if ! (${VM_FOUND}); then
		if sysctl -q dev.acpi.0.%desc | grep -q VBOX; then
       		VM_FOUND=true
    	else
        	VM_FOUND=false
    	fi
	fi
    # Need to add virtualbox, virtualpc, etc...
    if (${VM_FOUND}); then
		if [ "${SECOND_OPTION}" != "quiet" ]; then
        	echo "VM environnement detected"
		fi
    fi
	
	KERN_HZ=`sysctl -n kern.hz`
	if [ ${KERN_HZ} -gt 51 ]; then
		NOT_TUNED=true
	else
		NOT_TUNED=false
	fi

	#grep -q kern.hz=50 /boot/loader.conf
    #if [ $? -eq 0 ]; then
    #    NOT_TUNED=false
    #else
    #    NOT_TUNED=true
    #fi
	
	# Since FreeBSD 8, the kernel automatically detect the VM presence and lower the kern.hz
	# Not true in FBSD 8.0 stable

	if uname -r | grep -q 8.0; then
		FREEBSD_8=true
	else
		FREEBSD_8=false
	fi
	# Stupid if, but don't know how to use an "add" condition in the if
    if (${VM_FOUND}); then
		#if (${FREEBSD_8}); then
		#	echo "VM usage detected, but since FreeBSD 8 there is no need to tune the system"
		#	exit 0
		#fi
		if (${NOT_TUNED}); then
        	echo "Warning: default kern.hz too high for a VM use!"
        	echo 'Use "system virtualized" for lower it'
			#echo 'Actual kern.hz value: ${KERN_HZ}'
			#echo 'Recommended kern.hz value in a VM: 50'
   		fi 
	fi
    exit 0
}

# Create a new image with acceptable performance under virtualization (quemu, vmware, virtualbox, etc...)
sys_virtualized () {

	# Check if FreeBSD 8 detected
	#if uname -r | grep -q 8.0; then
		#echo "There is no need of tuning BSDRP based on FreeBSD 8.0 for being use as a VM"
		#exit 0
    #fi

	echo "This step will configure BSDRP for being use as a VM"
	echo "Do you want to continue ? (y/n)"
	while [ "$USER_CONFIRM" != "y" -a "$USER_CONFIRM" != "n" ]
	do
        read USER_CONFIRM <&1
	done
	
	if [ "$USER_CONFIRM" = "n" ]; then
		echo "Canceling"
		exit 0
	fi
	
	if [ `mount -u -o rw /` ]; then
		echo "Error: Can't mount in read-write mode the /"
		exit 1
	fi
	
	if [ `echo kern.hz=50 >> /boot/loader.conf` ]; then
		echo "Error: Can't modify loader.conf"
		exit 1
	fi

	if [ `mount -u -o ro /` ]; then
        echo "Error: Can't re-mount in read-only mode the /"
        exit 1
    fi

	echo "A reboot is needed for apply changes."

	exit 0


}

###################
## Main function ##
###################

# Get options passed by user
if [ $# -eq 1 ]; then
    FIRST_OPTION="$1"
else
   FIRST_OPTION=""
fi
if [ $# -eq 2 ]; then
   SECOND_OPTION="$2"
else
   SECOND_OPTION=""
fi
if [ $# -eq 3 ]; then
   THIRD_OPTION="$3"
else
	THIRD_OPTION=""
fi

case "$FIRST_OPTION" in
	halt|stop)
		sys_halt
		;;
	reboot|reload)
		sys_reboot
		;;
	virtualized)
		sys_virtualized
		;;
	check-vm)
        check_vm
        ;;
	integrity)
		integrity
		;;
	endpoint)
		endpoint
		;;
	help|h)
		usage
		;;
	*)
		if [ "${FIRST_OPTION}" = "" ];
		then
			echo "missing option"
		else	
			echo "illegal option: $FIRST_OPTION"
		fi
		usage
		;;
esac
