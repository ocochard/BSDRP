--- nanobsd.sh.orig	2010-02-25 22:27:29.000000000 +0100
+++ nanobsd.sh	2010-02-25 23:32:40.000000000 +0100
@@ -501,6 +501,187 @@
 	) > ${NANO_OBJ}/_.di 2>&1
 )
 
+create_arm_diskimage()
+{
+    pprint 2 "build diskimage"
+    pprint 3 "log: ${MAKEOBJDIRPREFIX}/_.di"
+
+    (
+    echo "NANO_MEDIASIZE:   $NANO_MEDIASIZE"
+    echo "NANO_IMAGES:  $NANO_IMAGES"
+    echo "NANO_SECTS:   $NANO_SECTS"
+    echo "NANO_HEADS:   $NANO_HEADS"
+    echo "NANO_CODESIZE:    $NANO_CODESIZE"
+    echo "NANO_CONFSIZE:    $NANO_CONFSIZE"
+    echo "NANO_DATASIZE:    $NANO_DATASIZE"
+
+    echo $NANO_MEDIASIZE $NANO_IMAGES \
+        $NANO_SECTS $NANO_HEADS \
+        $NANO_CODESIZE $NANO_CONFSIZE $NANO_DATASIZE |
+    awk '
+    {
+        printf "# %s\n", $0
+
+        # size of cylinder in sectors
+        cs = $3 * $4
+
+        # number of full cylinders on media
+        cyl = int ($1 / cs)
+
+        # output fdisk geometry spec, truncate cyls to 1023
+        if (cyl <= 1023)
+            print "g c" cyl " h" $4 " s" $3
+        else
+            print "g c" 1023 " h" $4 " s" $3
+if ($7 > 0) {
+            # size of data partition in full cylinders
+            dsl = int (($7 + cs - 1) / cs)
+        } else {
+            dsl = 0;
+        }
+
+        # size of config partition in full cylinders
+        csl = int (($6 + cs - 1) / cs)
+
+        if ($5 == 0) {
+            # size of image partition(s) in full cylinders
+            isl = int ((cyl - dsl - csl) / $2)
+        } else {
+            isl = int (($5 + cs - 1) / cs)
+        }
+
+        # First image partition start at second track
+        print "p 1 165 " $3, isl * cs - $3
+        c = isl * cs;
+
+        # Second image partition (if any) also starts offset one 
+        # track to keep them identical.
+        if ($2 > 1) {
+            print "p 2 165 " $3 + c, isl * cs - $3
+            c += isl * cs;
+        }
+
+        # Config partition starts at cylinder boundary.
+        print "p 3 165 " c, csl * cs
+        c += csl * cs
+		
+		# Data partition (if any) starts at cylinder boundary.
+        if ($7 > 0) {
+            print "p 4 165 " c, dsl * cs
+        } else if ($7 < 0 && $1 > c) {
+            print "p 4 165 " c, $1 - c
+        } else if ($1 < c) {
+            print "Disk space overcommitted by", \
+                c - $1, "sectors" > "/dev/stderr"
+            exit 2
+        }
+
+        # Force slice 1 to be marked active. This is necessary
+        # for booting the image from a USB device to work.
+        print "a 1"
+    }
+    ' > ${NANO_OBJ}/_.fdisk
+
+    IMG=${NANO_DISKIMGDIR}/${NANO_IMGNAME}
+    BS=${NANO_SECTS}b
+
+    if [ "${NANO_MD_BACKING}" = "swap" ] ; then
+        MD=`mdconfig -a -t swap -s ${NANO_MEDIASIZE} -x ${NANO_SECTS} \
+            -y ${NANO_HEADS}`
+    else
+        echo ""; echo "Creating md backing file ${IMG} ..."
+        _c=`expr ${NANO_MEDIASIZE} / ${NANO_SECTS}`
+        pprint 2 "dd if=/dev/zero of=${IMG} bs=${BS} count=${_c}"
+        dd if=/dev/zero of=${IMG} bs=${BS} count=${_c}
+        pprint 2 "mdconfig -a -t vnode -f ${IMG} -x ${NANO_SECTS} -y ${NANO_HEADS}"
+        MD=`mdconfig -a -t vnode -f ${IMG} -x ${NANO_SECTS} \
+            -y ${NANO_HEADS}`
+    fi
+	
+	trap "mdconfig -d -u $MD" 1 2 15 EXIT
+
+    echo ""; echo "Write partition table ..."
+    FDISK=${NANO_OBJ}/_.fdisk
+    pprint 2 "fdisk -i -f ${FDISK} ${MD}"
+    fdisk -i -f ${FDISK} ${MD}
+    pprint 2 "fdisk ${MD}"
+    fdisk ${MD}
+
+    # Create first image
+    IMG1=${NANO_DISKIMGDIR}/_.disk.image1
+    echo ""; echo "Create first image ${IMG1} ..."
+    SIZE=`awk '/^p 1/ { print $5 "b" }' ${FDISK}`
+    pprint 2 "${NANO_MAKEFS} -s ${SIZE} ${IMG1} ${NANO_WORLDDIR}"
+	# TO DO: glabel patch !!!!
+    ${NANO_MAKEFS} -s ${SIZE} ${IMG1} ${NANO_WORLDDIR}
+    pprint 2 "dd if=${IMG1} of=/dev/${MD}s1 bs=${BS}"
+    dd if=${IMG1} of=/dev/${MD}s1 bs=${BS}
+	tunefs -L ${NANO_GLABEL_SYS}1 /dev/${MD}s1
+    if [ $NANO_IMAGES -gt 1 -a $NANO_INIT_IMG2 -gt 0 ] ; then
+        IMG2=${NANO_DISKIMGDIR}/_.disk.image2
+        echo ""; echo "Create second image ${IMG2}..."
+        for f in ${NANO_WORLDDIR}/etc/fstab ${NANO_WORLDDIR}/conf/base/etc/fstab
+        do
+            sed -i "" "s/${NANO_DRIVE}s1/${NANO_DRIVE}s2/g" $f
+        done
+
+        SIZE=`awk '/^p 2/ { print $5 "b" }' ${FDISK}`
+        pprint 2 "${NANO_MAKEFS} -s ${SIZE} ${IMG2} ${NANO_WORLDDIR}"
+        ${NANO_MAKEFS} -s ${SIZE} ${IMG2} ${NANO_WORLDDIR}
+        pprint 2 "dd if=${IMG2} of=/dev/${MD}s2 bs=${BS}"
+        dd if=${IMG2} of=/dev/${MD}s2 bs=${BS}
+		tunefs -L ${NANO_GLABEL_SYS}2 /dev/${MD}s1
+    fi
+
+	# Create Config slice
+    CFG=${NANO_DISKIMGDIR}/_.disk.cfg
+    echo ""; echo "Creating config partition ${CFG}..."
+    SIZE=`awk '/^p 3/ { print $5 "b" }' ${FDISK}`
+    # XXX: fill from where ?
+    pprint 2 "${NANO_MAKEFS} -s ${SIZE} ${CFG} ${NANO_CFGDIR}"
+	# NEED TO SET THE LABEL !!!!!
+    ${NANO_MAKEFS} -s ${SIZE} ${CFG} ${NANO_CFGDIR}
+    pprint 2 "dd if=${CFG} of=/dev/${MD}s3 bs=${BS}"
+    dd if=${CFG} of=/dev/${MD}s3 bs=${BS}
+	tunefs -L ${NANO_GLABEL_CFG} /dev/${MD}s3
+    pprint 2 "rm ${CFG}"
+    rm ${CFG}; CFG=         # NB: disable printing below
+
+    # Create Data slice, if any.
+    if [ $NANO_DATASIZE -gt 0 ] ; then
+        DATA=${NANO_DISKIMGDIR}/_.disk.data
+        echo ""; echo "Creating data partition ${DATA}..."
+        SIZE=`awk '/^p 4/ { print $5 "b" }' ${FDISK}`
+        # XXX: fill from where ?
+        pprint 2 "${NANO_MAKEFS} -s ${SIZE} ${DATA} /var/empty"
+		# NEED TO SET THE LABEL !!!
+        ${NANO_MAKEFS} -s ${SIZE} ${DATA} /var/empty
+        pprint 2 "dd if=${DATA} of=/dev/${MD}s4 bs=${BS}"
+        dd if=${DATA} of=/dev/${MD}s4 bs=${BS}
+		tunefs -L ${NANO_GLABEL_DATA} /dev/${MD}s4
+        pprint 2 "rm ${DATA}"
+        rm ${DATA}; DATA=   # NB: disable printing below
+    fi
+
+    if [ "${NANO_MD_BACKING}" = "swap" ] ; then
+        echo "Writing out _.disk.full..."
+        dd if=/dev/${MD} of=${IMG} bs=${BS}
+    fi
+
+	echo ""
+    echo "Completed images in:"
+    echo ""
+    echo "Full disk:         ${IMG}"
+    echo "Primary partition: ${IMG1}"
+    test "${IMG2}" && echo "2ndary partition:  ${IMG2}"
+    test "${CFG}" &&  echo "/cfg partition:    ${CFG}"
+    test "${DATA}" && echo "/data partition:   ${DATA}"
+    echo ""
+    echo "Use dd if=<file> of=/dev/<somewhere> bs=${BS} to transfer an"
+    echo "image to bootable media /dev/<somewhere>."
+    ) > ${MAKEOBJDIRPREFIX}/_.di 2>&1
+}
+
 last_orders () (
 	# Redefine this function with any last orders you may have
 	# after the build completed, for instance to copy the finished
