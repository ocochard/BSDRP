--- tools/tools/netrate/netblast/netblast.c.orig	2012-02-22 23:24:10.000000000 +0100
+++ tools/tools/netrate/netblast/netblast.c	2012-02-22 23:24:30.000000000 +0100
@@ -23,7 +23,7 @@
  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
  * SUCH DAMAGE.
  *
- * $FreeBSD: src/tools/tools/netrate/netblast/netblast.c,v 1.3.10.2 2011/09/05 17:45:22 marius Exp $
+ * $FreeBSD: src/tools/tools/netrate/netblast/netblast.c,v 1.5 2011/11/08 17:23:43 cognet Exp $
  */
 
 #include <sys/endian.h>
@@ -32,13 +32,13 @@
 #include <sys/time.h>
 
 #include <netinet/in.h>
-
-#include <arpa/inet.h>
+#include <netdb.h>			/* getaddrinfo */
 
 #include <signal.h>
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
+#include <unistd.h>			/* close */
 
 static void
 usage(void)
@@ -65,7 +65,7 @@
  * the higher the relative overhead.
  */
 static int
-blast_loop(int s, long duration, u_char *packet, u_int packet_len)
+blast_loop(int s, long duration, u_char *packet, u_int packet_len, int family)
 {
 	struct timespec starttime, tmptime;
 	struct itimerval it;
@@ -131,36 +131,43 @@
 	    tmptime.tv_nsec);
 	printf("send calls:        %d\n", send_calls);
 	printf("send errors:       %d\n", send_errors);
+	printf("send success:      %d\n", send_calls - send_errors);
 	printf("approx send rate:  %ld\n", (send_calls - send_errors) /
 	    duration);
 	printf("approx error rate: %d\n", (send_errors / send_calls));
-
+	printf("approx throughput: ");
+		if (family == AF_INET)
+			printf("%ld Mib/s\n", ((send_calls - send_errors) / duration ) *
+			(packet_len + 8 + 20 + 14 ) * 8 / 1000 / 1000);
+		else if (family == AF_INET6)
+			printf("%ld Mib/s\n", ((send_calls - send_errors) / duration ) *
+			(packet_len + 8 + 40 + 14 ) * 8 / 1000 / 1000);
+		else printf("CAN 'T DETERMINE family type %i\n",family);
 	return (0);
 }
 
 int
 main(int argc, char *argv[])
 {
-	long payloadsize, port, duration;
-	struct sockaddr_in sin;
+	long payloadsize, duration;
+	struct addrinfo hints, *res, *res0;
 	char *dummy, *packet;
-	int s;
+	int port, s, error;
+	const char *cause = NULL;
 
 	if (argc != 5)
 		usage();
 
-	bzero(&sin, sizeof(sin));
-	sin.sin_len = sizeof(sin);
-	sin.sin_family = AF_INET;
-	if (inet_aton(argv[1], &sin.sin_addr) == 0) {
-		perror(argv[1]);
-		return (-1);
-	}
+	memset(&hints, 0, sizeof(hints));
+	hints.ai_family = PF_UNSPEC;
+	hints.ai_socktype = SOCK_DGRAM;
 
 	port = strtoul(argv[2], &dummy, 10);
-	if (port < 1 || port > 65535 || *dummy != '\0')
+	if (port < 1 || port > 65535 || *dummy != '\0') {
+		fprintf(stderr, "Invalid port number: %s\n", argv[2]);
 		usage();
-	sin.sin_port = htons(port);
+		/*NOTREACHED*/
+	}
 
 	payloadsize = strtoul(argv[3], &dummy, 10);
 	if (payloadsize < 0 || *dummy != '\0')
@@ -168,29 +175,55 @@
 	if (payloadsize > 32768) {
 		fprintf(stderr, "payloadsize > 32768\n");
 		return (-1);
+		/*NOTREACHED*/
 	}
 
 	duration = strtoul(argv[4], &dummy, 10);
-	if (duration < 0 || *dummy != '\0')
+	if (duration < 0 || *dummy != '\0') {
+		fprintf(stderr, "Invalid duration time: %s\n", argv[4]);
 		usage();
+		/*NOTREACHED*/
+	}
 
 	packet = malloc(payloadsize);
 	if (packet == NULL) {
 		perror("malloc");
 		return (-1);
+		/*NOTREACHED*/
 	}
+
 	bzero(packet, payloadsize);
+	error = getaddrinfo(argv[1],argv[2], &hints, &res0);
+	if (error) {
+		perror(gai_strerror(error));
+		return (-1);
+		/*NOTREACHED*/
+	}
+	s = -1;
+	for (res = res0; res; res = res->ai_next) {
+		s = socket(res->ai_family, res->ai_socktype, 0);
+		if (s < 0) {
+			cause = "socket";
+			continue;
+		}
 
-	s = socket(PF_INET, SOCK_DGRAM, 0);
-	if (s == -1) {
-		perror("socket");
-		return (-1);
-	}
+		if (connect(s, res->ai_addr, res->ai_addrlen) < 0) {
+			cause = "connect";
+			close(s);
+			s = -1;
+			continue;
+		}
 
-	if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
-		perror("connect");
+		break;  /* okay we got one */
+	}
+	if (s < 0) {
+		perror(cause);
 		return (-1);
+		/*NOTREACHED*/
 	}
 
-	return (blast_loop(s, duration, packet, payloadsize));
+	freeaddrinfo(res0);
+
+	return (blast_loop(s, duration, packet, payloadsize,res->ai_family));
+
 }
