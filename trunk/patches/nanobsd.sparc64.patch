--- nanobsd.sh.bsdrp	2010-07-23 10:53:51.000000000 +0200
+++ nanobsd.sh	2010-07-29 15:59:18.000000000 +0200
@@ -538,6 +538,111 @@
 	create_i386_diskimage
 )
 
+create_sparc64_diskimage ( ) (
+    pprint 2 "build diskimage"
+    pprint 3 "log: ${NANO_OBJ}/_.di"
+	# Using sparc bootloader
+	NANO_BOOTLOADER="boot/boot1"
+
+    (
+    IMG=${NANO_DISKIMGDIR}/${NANO_IMGNAME}
+    MNT=${NANO_OBJ}/_.mnt
+    mkdir -p ${MNT}
+
+    if [ "${NANO_MD_BACKING}" = "swap" ] ; then
+        MD=`mdconfig -a -t swap -s ${NANO_MEDIASIZE} -x ${NANO_SECTS} \
+            -y ${NANO_HEADS}`
+    else
+        echo "Creating md backing file..."
+        dd if=/dev/zero of=${IMG} bs=${NANO_SECTS}b \
+            count=`expr ${NANO_MEDIASIZE} / ${NANO_SECTS}`
+        MD=`mdconfig -a -t vnode -f ${IMG} -x ${NANO_SECTS} \
+            -y ${NANO_HEADS}`
+    fi
+
+    trap "echo 'Running exit trap code' ; df -i ${MNT} ; umount ${MNT} || true ; mdconfig -d -u $MD" 1 2 15 EXIT
+	# Create initial bootable label:
+	echo "Creating initial empty but bootable sunlabel..."
+	sunlabel -w -B ${MD} auto
+	
+	# Extracting label prototype in cylinder unit
+	sunlabel -c ${MD} > ${NANO_OBJ}/_.sunlabel
+
+	# Generate partition on the prototype file
+	# Need to calc the NANO_CODESIZE and the media size that is smaller than given (why??)
+	# Warning, from sunlabel man page  : "partitions in the Sun OpenBoot PROM
+    # must always start at a cylinder boundary (for whatever geometry emulation
+    # has been chosen)."
+
+	if [ ${NANO_CODESIZE} = 0 ]; then
+		#MESURED_MEDIASIZE=`grep "sectors/unit" ${NANO_OBJ}/_.sunlabel | cut -d' ' -f 2`
+ 	MESURED_MEDIASIZE_CYL=`grep "text" ${NANO_OBJ}/_.sunlabel| cut -d' ' -f 4`
+	SEC_PER_CYL=`grep "sectors/cylinder" ${NANO_OBJ}/_.sunlabel | cut -d' ' -f 2`
+	NANO_CONFSIZE_CYL=`expr $NANO_CONFSIZE / $SEC_PER_CYL`
+	NANO_DATASIZE_CYL=`expr $NANO_DATASIZE / $SEC_PER_CYL`
+	NANO_CODESIZE_CYL=`expr \( $MESURED_MEDIASIZE_CYL - $NANO_CONFSIZE_CYL - $NANO_DATASIZE_CYL \) / 2`
+	fi	
+	echo "a: ${NANO_CODESIZE_CYL} 0" >> ${NANO_OBJ}/_.sunlabel
+	echo "d: ${NANO_CODESIZE_CYL} *" >> ${NANO_OBJ}/_.sunlabel
+	echo "e: ${NANO_CONFSIZE_CYL} *" >> ${NANO_OBJ}/_.sunlabel
+	echo "f: ${NANO_DATASIZE_CYL} *" >> ${NANO_OBJ}/_.sunlabel
+
+	# Apply the label prototype file to the md disk
+	sunlabel -c -R ${MD} ${NANO_OBJ}/_.sunlabel
+
+ # Create first image
+    newfs -L ${NANO_GLABEL_SYS}1 ${NANO_NEWFS} /dev/${MD}a
+    mount /dev/${MD}a ${MNT}
+    df -i ${MNT}
+    echo "Copying worlddir..."
+    ( cd ${NANO_WORLDDIR} && find . -print | cpio -dump ${MNT} )
+    df -i ${MNT}
+    echo "Generating mtree..."
+    echo "./etc" > ${NANO_OBJ}/mtree-exclude
+    echo "./var" >> ${NANO_OBJ}/mtree-exclude
+    echo "./tmp" >> ${NANO_OBJ}/mtree-exclude
+    echo "./dev" >> ${NANO_OBJ}/mtree-exclude
+    ( cd ${MNT} && mtree -x -ic -k flags,gid,mode,nlink,size,link,uid,md5digest,sha256digest -X ${NANO_OBJ}/mtree-exclude ) > ${NANO_OBJ}/_.mtree
+
+    ( cd ${MNT} && du -k ) > ${NANO_OBJ}/_.du
+    umount ${MNT}
+
+    if [ $NANO_IMAGES -gt 1 -a $NANO_INIT_IMG2 -gt 0 ] ; then
+        # Duplicate to second image (if present)
+        echo "Duplicating to second image..."
+        dd if=/dev/${MD}a of=/dev/${MD}d bs=64k
+        mount /dev/${MD}d ${MNT}
+        for f in ${MNT}/etc/fstab ${MNT}/conf/base/etc/fstab
+        do
+            sed -i "" "s/${NANO_DRIVE}a/${NANO_DRIVE}d/g" $f
+        done
+        umount ${MNT}
+    fi
+
+    # Create Config slice
+    newfs -L ${NANO_GLABEL_CFG} ${NANO_NEWFS} /dev/${MD}e
+    # XXX: fill from where ?
+
+    # Create Data slice, if any.
+    if [ $NANO_DATASIZE -ne 0 ] ; then
+        newfs  -L ${NANO_GLABEL_DATA} ${NANO_NEWFS} /dev/${MD}f
+        # XXX: fill from where ?
+    fi
+
+    if [ "${NANO_MD_BACKING}" = "swap" ] ; then
+        echo "Writing out ${NANO_IMGNAME}..."
+        dd if=/dev/${MD} of=${IMG} bs=64k
+    fi
+
+    echo "Writing out _.disk.image..."
+    dd if=/dev/${MD}a of=${NANO_DISKIMGDIR}/_.disk.image bs=64k
+    mdconfig -d -u $MD
+
+    trap - 1 2 15 EXIT
+
+    ) > ${NANO_OBJ}/_.di 2>&1
+)
+
 create_arm_diskimage()
 {
     pprint 2 "build diskimage"
