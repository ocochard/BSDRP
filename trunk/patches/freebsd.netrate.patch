--- tools/tools/netrate/netblast/netblast.c.orig	2010-12-21 18:09:25.000000000 +0100
+++ tools/tools/netrate/netblast/netblast.c	2011-12-23 14:13:35.000000000 +0100
@@ -23,21 +23,22 @@
  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
  * SUCH DAMAGE.
  *
- * $FreeBSD: src/tools/tools/netrate/netblast/netblast.c,v 1.3.10.1.6.1 2010/12/21 17:09:25 kensmith Exp $
+ * $FreeBSD: src/tools/tools/netrate/netblast/netblast.c,v 1.5 2011/11/08 17:23:43 cognet Exp $
  */

+#include <sys/endian.h>
 #include <sys/types.h>
 #include <sys/socket.h>
 #include <sys/time.h>

 #include <netinet/in.h>
-
-#include <arpa/inet.h>
+#include <netdb.h>                     /* getaddrinfo */

 #include <signal.h>
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
+#include <unistd.h>                    /* close */

 static void
 usage(void)
@@ -64,7 +65,7 @@
  * the higher the relative overhead.
  */
 static int
-blast_loop(int s, long duration, u_char *packet, u_int packet_len)
+blast_loop(int s, long duration, u_char *packet, u_int packet_len, int family)
 {
        struct timespec starttime, tmptime;
        struct itimerval it;
@@ -108,11 +109,9 @@
                 * previous send, the error will turn up the current send
                 * operation, causing the current sequence number also to be
                 * skipped.
-                *
-                * XXXRW: Note alignment assumption.
                 */
                if (packet_len >= 4) {
-                       *((u_int32_t *)packet) = htonl(counter);
+                       be32enc(packet, counter);
                        counter++;
                }
                if (send(s, packet, packet_len, 0) < 0)
@@ -132,36 +131,43 @@
            tmptime.tv_nsec);
        printf("send calls:        %d\n", send_calls);
        printf("send errors:       %d\n", send_errors);
+       printf("send success:      %d\n", send_calls - send_errors);
        printf("approx send rate:  %ld\n", (send_calls - send_errors) /
            duration);
        printf("approx error rate: %d\n", (send_errors / send_calls));
-
+       printf("approx throughput: ");
+       if (family == AF_INET)
+               printf("%ld Mib/s\n", ((send_calls - send_errors) / duration ) *
+               (packet_len + 8 + 20 + 14 ) * 8 / 1000 / 1000);
+       else if (family == AF_INET6)
+               printf("%ld Mib/s\n", ((send_calls - send_errors) / duration ) *
+        (packet_len + 8 + 40 + 14 ) * 8 / 1000 / 1000);
+       else printf("CAN 'T DETERMINE family type %i\n",family);
        return (0);
 }

 int
 main(int argc, char *argv[])
 {
-       long payloadsize, port, duration;
-       struct sockaddr_in sin;
+       long payloadsize, duration;
+       struct addrinfo hints, *res, *res0;
        char *dummy, *packet;
-       int s;
+       int port, s, error;
+       const char *cause = NULL;

        if (argc != 5)
                usage();

-       bzero(&sin, sizeof(sin));
-       sin.sin_len = sizeof(sin);
-       sin.sin_family = AF_INET;
-       if (inet_aton(argv[1], &sin.sin_addr) == 0) {
-               perror(argv[1]);
-               return (-1);
-       }
+       memset(&hints, 0, sizeof(hints));
+       hints.ai_family = PF_UNSPEC;
+       hints.ai_socktype = SOCK_DGRAM;

        port = strtoul(argv[2], &dummy, 10);
-       if (port < 1 || port > 65535 || *dummy != '\0')
+       if (port < 1 || port > 65535 || *dummy != '\0') {
+               fprintf(stderr, "Invalid port number: %s\n", argv[2]);
                usage();
-       sin.sin_port = htons(port);
+               /*NOTREACHED*/
+       }

        payloadsize = strtoul(argv[3], &dummy, 10);
        if (payloadsize < 0 || *dummy != '\0')
@@ -169,29 +175,55 @@
        if (payloadsize > 32768) {
                fprintf(stderr, "payloadsize > 32768\n");
                return (-1);
+               /*NOTREACHED*/
        }

        duration = strtoul(argv[4], &dummy, 10);
-       if (duration < 0 || *dummy != '\0')
+       if (duration < 0 || *dummy != '\0') {
+               fprintf(stderr, "Invalid duration time: %s\n", argv[4]);
                usage();
+               /*NOTREACHED*/
+       }

        packet = malloc(payloadsize);
        if (packet == NULL) {
                perror("malloc");
                return (-1);
+               /*NOTREACHED*/
        }
+
        bzero(packet, payloadsize);
+       error = getaddrinfo(argv[1],argv[2], &hints, &res0);
+       if (error) {
+               perror(gai_strerror(error));
+               return (-1);
+               /*NOTREACHED*/
+       }
+       s = -1;
+       for (res = res0; res; res = res->ai_next) {
+               s = socket(res->ai_family, res->ai_socktype, 0);
+               if (s < 0) {
+                       cause = "socket";
+                       continue;
+               }

-       s = socket(PF_INET, SOCK_DGRAM, 0);
-       if (s == -1) {
-               perror("socket");
-               return (-1);
-       }
+               if (connect(s, res->ai_addr, res->ai_addrlen) < 0) {
+                       cause = "connect";
+                       close(s);
+                       s = -1;
+                       continue;
+               }

-       if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
-               perror("connect");
+               break;  /* okay we got one */
+       }
+       if (s < 0) {
+               perror(cause);
                return (-1);
+               /*NOTREACHED*/
        }

-       return (blast_loop(s, duration, packet, payloadsize));
+       freeaddrinfo(res0);
+
+       return (blast_loop(s, duration, packet, payloadsize,res->ai_family));
+
 }
diff -ruN tools/tools/netrate.old/netreceive/netreceive.c tools/tools/netrate/netreceive/netreceive.c
--- tools/tools/netrate.old/netreceive/netreceive.c	2011-12-11 11:26:24.000000000 +0100
+++ tools/tools/netrate/netreceive/netreceive.c	2011-12-11 11:27:17.000000000 +0100
@@ -23,20 +23,25 @@
  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
  * SUCH DAMAGE.
  *
- * $FreeBSD: src/tools/tools/netrate/netreceive/netreceive.c,v 1.2.24.1.6.1 2010/12/21 17:09:25 kensmith Exp $
+ * $FreeBSD: src/tools/tools/netrate/netreceive/netreceive.c,v 1.3 2011/11/08 17:23:43 cognet Exp $
  */
 
 #include <sys/types.h>
 #include <sys/socket.h>
 #include <sys/time.h>
+#include <sys/poll.h>
 
 #include <netinet/in.h>
+#include <netdb.h>          /* getaddrinfo */
 
 #include <arpa/inet.h>
 
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
+#include <unistd.h>         /* close */
+
+#define MAXSOCK 20
 
 static void
 usage(void)
@@ -49,23 +54,26 @@
 int
 main(int argc, char *argv[])
 {
-	struct sockaddr_in sin;
+	struct addrinfo hints, *res, *res0;
 	char *dummy, *packet;
-	long port;
-	int s, v;
+	int port;
+	int error, v, i;
+	const char *cause = NULL;
+	int s[MAXSOCK];
+	struct pollfd fds[MAXSOCK];
+	int nsock;
 
 	if (argc != 2)
 		usage();
 
-	bzero(&sin, sizeof(sin));
-	sin.sin_len = sizeof(sin);
-	sin.sin_family = AF_INET;
-	sin.sin_addr.s_addr = htonl(INADDR_ANY);
+	memset(&hints, 0, sizeof(hints));
+	hints.ai_family = PF_UNSPEC;
+	hints.ai_socktype = SOCK_DGRAM;
+	hints.ai_flags = AI_PASSIVE;
 
 	port = strtoul(argv[1], &dummy, 10);
 	if (port < 1 || port > 65535 || *dummy != '\0')
 		usage();
-	sin.sin_port = htons(port);
 
 	packet = malloc(65536);
 	if (packet == NULL) {
@@ -74,27 +82,60 @@
 	}
 	bzero(packet, 65536);
 
-	s = socket(PF_INET, SOCK_DGRAM, 0);
-	if (s == -1) {
-		perror("socket");
+	error = getaddrinfo(NULL, argv[1], &hints, &res0);
+	if (error) {
+		perror(gai_strerror(error));
 		return (-1);
+		/*NOTREACHED*/
 	}
 
-	v = 128 * 1024;
-	if (setsockopt(s, SOL_SOCKET, SO_RCVBUF, &v, sizeof(v)) < 0) {
-		perror("SO_RCVBUF");
-		return (-1);
-	}
+	nsock = 0;
+	for (res = res0; res && nsock < MAXSOCK; res = res->ai_next) {
+		s[nsock] = socket(res->ai_family, res->ai_socktype,
+		res->ai_protocol);
+		if (s[nsock] < 0) {
+			cause = "socket";
+			continue;
+		}
+
+		v = 128 * 1024;
+		if (setsockopt(s[nsock], SOL_SOCKET, SO_RCVBUF, &v, sizeof(v)) < 0) {
+			cause = "SO_RCVBUF";
+			close(s[nsock]);
+			continue;
+		}
+		if (bind(s[nsock], res->ai_addr, res->ai_addrlen) < 0) {
+			cause = "bind";
+			close(s[nsock]);
+			continue;
+		}
+		(void) listen(s[nsock], 5);
+		fds[nsock].fd = s[nsock];
+		fds[nsock].events = POLLIN;
 
-	if (bind(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
-		perror("bind");
+		nsock++;
+	}
+	if (nsock == 0) {
+		perror(cause);
 		return (-1);
+		/*NOTREACHED*/
 	}
 
 	printf("netreceive listening on UDP port %d\n", (u_short)port);
 
 	while (1) {
-		if (recv(s, packet, 65536, 0) < 0)
-			perror("recv");
+		if (poll(fds, nsock, -1) < 0) 
+			perror("poll");
+		for (i = 0; i < nsock; i++) {
+			if (fds[i].revents & POLLIN) {
+				if (recv(s[i], packet, 65536, 0) < 0)
+					perror("recv");
+			}
+			if ((fds[i].revents &~ POLLIN) != 0)
+				perror("poll");
+		}
 	}
+	
+	/*NOTREACHED*/
+	freeaddrinfo(res0);
 }
diff -ruN tools/tools/netrate.old/netsend/netsend.c tools/tools/netrate/netsend/netsend.c
--- tools/tools/netrate.old/netsend/netsend.c	2011-12-11 11:26:24.000000000 +0100
+++ tools/tools/netrate/netsend/netsend.c	2011-12-11 11:27:52.000000000 +0100
@@ -23,11 +23,13 @@
  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
  * SUCH DAMAGE.
  *
- * $FreeBSD: src/tools/tools/netrate/netsend/netsend.c,v 1.9.10.1.6.1 2010/12/21 17:09:25 kensmith Exp $
+ * $FreeBSD: src/tools/tools/netrate/netsend/netsend.c,v 1.13 2011/11/08 17:23:43 cognet Exp $
  */
 
+#include <sys/endian.h>
 #include <sys/types.h>
 #include <sys/socket.h>
+#include <net/if.h>		/* if_nametoindex() */
 #include <sys/time.h>
 
 #include <netinet/in.h>
@@ -39,12 +41,27 @@
 #include <stdlib.h>
 #include <string.h>
 
+#include <netdb.h>
+
+/* program arguments */
+struct _a {
+	int s;
+	int ipv6;
+	struct timespec interval;
+	int port, port_max;
+	long duration;
+	struct sockaddr_in sin;
+	struct sockaddr_in6 sin6;
+	int packet_len;
+	void *packet;
+};
+
 static void
 usage(void)
 {
 
 	fprintf(stderr,
-	    "netsend [ip] [port] [payloadsize] [rate] [duration]\n");
+	    "netsend [ip] [port[-port_max]] [payloadsize] [packet_rate] [duration]\n");
 	exit(-1);
 }
 
@@ -114,26 +131,39 @@
  * Calculate a second-aligned starting time for the packet stream.  Busy
  * wait between our calculated interval and dropping the provided packet
  * into the socket.  If we hit our duration limit, bail.
+ * We sweep the ports from a->port to a->port_max included.
+ * If the two ports are the same we connect() the socket upfront, which
+ * almost halves the cost of the sendto() call.
  */
 static int
-timing_loop(int s, struct timespec interval, long duration, u_char *packet,
-    u_int packet_len)
+timing_loop(struct _a *a)
 {
 	struct timespec nexttime, starttime, tmptime;
 	long long waited;
 	u_int32_t counter;
 	long finishtime;
 	long send_errors, send_calls;
+	/* do not call gettimeofday more than every 20us */
+	long minres_ns = 20000;
+	int ic, gettimeofday_cycles;
+	int cur_port;
 
 	if (clock_getres(CLOCK_REALTIME, &tmptime) == -1) {
 		perror("clock_getres");
 		return (-1);
 	}
 
-	if (timespec_ge(&tmptime, &interval))
+	if (timespec_ge(&tmptime, &a->interval))
 		fprintf(stderr,
-		    "warning: interval less than resolution (%jd.%09ld)\n",
+		    "warning: interval (%jd.%09ld) less than resolution (%jd.%09ld)\n",
+		    (intmax_t)a->interval.tv_sec, a->interval.tv_nsec,
 		    (intmax_t)tmptime.tv_sec, tmptime.tv_nsec);
+	if (a->interval.tv_nsec < minres_ns) {
+		gettimeofday_cycles = minres_ns/(tmptime.tv_nsec + 1);
+		fprintf(stderr,
+		    "calling time every %d cycles\n", gettimeofday_cycles);
+	} else
+		gettimeofday_cycles = 0;
 
 	if (clock_gettime(CLOCK_REALTIME, &starttime) == -1) {
 		perror("clock_gettime");
@@ -146,15 +176,35 @@
 	if (wait_time(starttime, NULL, NULL) == -1)
 		return (-1);
 	nexttime = starttime;
-	finishtime = starttime.tv_sec + duration;
+	finishtime = starttime.tv_sec + a->duration;
 
 	send_errors = send_calls = 0;
 	counter = 0;
 	waited = 0;
+	ic = gettimeofday_cycles;
+	cur_port = a->port;
+	if (a->port == a->port_max) {
+		if (a->ipv6) {
+			if (connect(a->s, (struct sockaddr *)&a->sin6, sizeof(a->sin6))) {
+				perror("connect (ipv6)");
+				return (-1);
+			}
+		} else {
+			if (connect(a->s, (struct sockaddr *)&a->sin, sizeof(a->sin))) {
+				perror("connect (ipv4)");
+				return (-1);
+			}
+		}
+	}
 	while (1) {
-		timespec_add(&nexttime, &interval);
-		if (wait_time(nexttime, &tmptime, &waited) == -1)
-			return (-1);
+		int ret;
+
+		timespec_add(&nexttime, &a->interval);
+		if (--ic <= 0) {
+			ic = gettimeofday_cycles;
+			if (wait_time(nexttime, &tmptime, &waited) == -1)
+				return (-1);
+		}
 		/*
 		 * We maintain and, if there's room, send a counter.  Note
 		 * that even if the error is purely local, we still increment
@@ -164,17 +214,31 @@
 		 * previous send, the error will turn up the current send
 		 * operation, causing the current sequence number also to be
 		 * skipped.
-		 *
-		 * XXXRW: Note alignment assumption.
+		 * The counter is incremented only on the initial port number,
+		 * so all destinations will see the same set of packets.
 		 */
-		if (packet_len >= 4) {
-			*((u_int32_t *)packet) = htonl(counter);
+		if (cur_port == a->port && a->packet_len >= 4) {
+			be32enc(a->packet, counter);
 			counter++;
 		}
-		if (send(s, packet, packet_len, 0) < 0)
+		if (a->port == a->port_max) { /* socket already bound */
+			ret = send(a->s, a->packet, a->packet_len, 0);
+		} else {
+			a->sin.sin_port = htons(cur_port++);
+			if (cur_port > a->port_max)
+				cur_port = a->port;
+			if (a->ipv6) {
+			ret = sendto(a->s, a->packet, a->packet_len, 0,
+			    (struct sockaddr *)&a->sin6, sizeof(a->sin6));
+			} else {
+			ret = sendto(a->s, a->packet, a->packet_len, 0,
+				(struct sockaddr *)&a->sin, sizeof(a->sin));
+			}
+		}
+		if (ret < 0)
 			send_errors++;
 		send_calls++;
-		if (duration != 0 && tmptime.tv_sec >= finishtime)
+		if (a->duration != 0 && tmptime.tv_sec >= finishtime)
 			goto done;
 	}
 
@@ -191,11 +255,11 @@
 	    tmptime.tv_nsec);
 	printf("send calls:        %ld\n", send_calls);
 	printf("send errors:       %ld\n", send_errors);
-	printf("approx send rate:  %ld\n", (send_calls - send_errors) /
-	    duration);
+	printf("approx send rate:  %ld pps\n", (send_calls - send_errors) /
+	    a->duration);
 	printf("approx error rate: %ld\n", (send_errors / send_calls));
 	printf("waited:            %lld\n", waited);
-	printf("approx waits/sec:  %lld\n", (long long)(waited / duration));
+	printf("approx waits/sec:  %lld\n", (long long)(waited / a->duration));
 	printf("approx wait rate:  %lld\n", (long long)(waited / send_calls));
 
 	return (0);
@@ -204,27 +268,58 @@
 int
 main(int argc, char *argv[])
 {
-	long rate, payloadsize, port, duration;
-	struct timespec interval;
-	struct sockaddr_in sin;
-	char *dummy, *packet;
-	int s;
+	long rate, payloadsize, port;
+	char *dummy;
+	struct _a a;	/* arguments */
+	struct addrinfo hints, *res, *ressave;
+
+	bzero(&a, sizeof(a));
 
 	if (argc != 6)
 		usage();
 
-	bzero(&sin, sizeof(sin));
-	sin.sin_len = sizeof(sin);
-	sin.sin_family = AF_INET;
-	if (inet_aton(argv[1], &sin.sin_addr) == 0) {
-		perror(argv[1]);
+	memset(&hints, 0, sizeof(hints));
+	hints.ai_family = AF_UNSPEC;
+
+	if (getaddrinfo(argv[1], NULL, &hints, &res) != 0) {
+		fprintf(stderr, "Couldn't resolv %s\n", argv[1]);
 		return (-1);
 	}
+	ressave = res;
+	while (res) {
+		if (res->ai_family == AF_INET) {
+			memcpy(&a.sin, res->ai_addr, res->ai_addrlen);
+			a.ipv6 = 0;
+			break;
+		} else if (res->ai_family == AF_INET6) {
+			memcpy(&a.sin6, res->ai_addr, res->ai_addrlen);
+			a.ipv6 = 1;
+			break;
+		} 
+		res = res->ai_next;
+	}
+	if (!res) {
+		fprintf(stderr, "Couldn't resolv %s\n", argv[1]);
+		exit(1);
+	}
+	freeaddrinfo(ressave);
 
 	port = strtoul(argv[2], &dummy, 10);
-	if (port < 1 || port > 65535 || *dummy != '\0')
+	if (port < 1 || port > 65535)
+		usage();
+	if (*dummy != '\0' && *dummy != '-')
 		usage();
-	sin.sin_port = htons(port);
+	if (a.ipv6)
+		a.sin6.sin6_port = htons(port);
+	else
+		a.sin.sin_port = htons(port);
+	a.port = a.port_max = port;
+	if (*dummy == '-') {	/* set high port */
+		port = strtoul(dummy + 1, &dummy, 10);
+		if (port < a.port || port > 65535)
+			usage();
+		a.port_max = port;
+	}
 
 	payloadsize = strtoul(argv[3], &dummy, 10);
 	if (payloadsize < 0 || *dummy != '\0')
@@ -233,55 +328,54 @@
 		fprintf(stderr, "payloadsize > 32768\n");
 		return (-1);
 	}
+	a.packet_len = payloadsize;
 
 	/*
 	 * Specify an arbitrary limit.  It's exactly that, not selected by
-	 .* any particular strategy.  '0' is a special value meaning "blast",
+	 * any particular strategy.  '0' is a special value meaning "blast",
 	 * and avoids the cost of a timing loop.
 	 */
 	rate = strtoul(argv[4], &dummy, 10);
-	if (rate < 1 || *dummy != '\0')
+	if (rate < 0 || *dummy != '\0')
 		usage();
 	if (rate > MAX_RATE) {
-		fprintf(stderr, "rate > %d\n", MAX_RATE);
+		fprintf(stderr, "packet rate at most %d\n", MAX_RATE);
 		return (-1);
 	}
 
-	duration = strtoul(argv[5], &dummy, 10);
-	if (duration < 0 || *dummy != '\0')
+	a.duration = strtoul(argv[5], &dummy, 10);
+	if (a.duration < 0 || *dummy != '\0')
 		usage();
 
-	packet = malloc(payloadsize);
-	if (packet == NULL) {
+	a.packet = malloc(payloadsize);
+	if (a.packet == NULL) {
 		perror("malloc");
 		return (-1);
 	}
-	bzero(packet, payloadsize);
-
+	bzero(a.packet, payloadsize);
 	if (rate == 0) {
-		interval.tv_sec = 0;
-		interval.tv_nsec = 0;
+		a.interval.tv_sec = 0;
+		a.interval.tv_nsec = 0;
 	} else if (rate == 1) {
-		interval.tv_sec = 1;
-		interval.tv_nsec = 0;
+		a.interval.tv_sec = 1;
+		a.interval.tv_nsec = 0;
 	} else {
-		interval.tv_sec = 0;
-		interval.tv_nsec = ((1 * 1000000000) / rate);
+		a.interval.tv_sec = 0;
+		a.interval.tv_nsec = ((1 * 1000000000) / rate);
 	}
+
 	printf("Sending packet of payload size %ld every %jd.%09lds for %ld "
-	    "seconds\n", payloadsize, (intmax_t)interval.tv_sec,
-	    interval.tv_nsec, duration);
+	    "seconds\n", payloadsize, (intmax_t)a.interval.tv_sec,
+	    a.interval.tv_nsec, a.duration);
 
-	s = socket(PF_INET, SOCK_DGRAM, 0);
-	if (s == -1) {
+	if (a.ipv6)
+		a.s = socket(PF_INET6, SOCK_DGRAM, 0);
+	else
+		a.s = socket(PF_INET, SOCK_DGRAM, 0);
+	if (a.s == -1) {
 		perror("socket");
 		return (-1);
 	}
 
-	if (connect(s, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
-		perror("connect");
-		return (-1);
-	}
-
-	return (timing_loop(s, interval, duration, packet, payloadsize));
+	return (timing_loop(&a));
 }
